--[[
Secret Hitler Probability Calculator
Made by Sionar
--]]


------------------Constants
VERSION = '1.3.4'
COL = {0.5, 1, 1.5, 2}
ROW = {-1, -0.6, -0.2, 0.2, 0.6, 1}
START_POS = {125, 1.1, -29}
SELF_SCALE = {4,1,4}


------------------Variables
lib = 6
fas = 11
draw = 3
nameLabels = {}
valLabels = {}

function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        lib = save['lib']
        fas = save['fas']
        draw = save['draw'] or draw
        nameLabels = save['nL']
        valLabels = save['vL']
    end
    refreshButtons()
    moveBoard()
    self.setDescription('v ' .. VERSION .. '\nMade by Sionar')
end

function onSave()
    local save = {}
    save['lib'] = lib
    save['fas'] = fas
    save['draw'] = draw
    save['nL'] = nameLabels
    save['vL'] = valLabels
    local saveString = JSON.encode(save)
    return saveString
end

function moveBoard()
    local global_name = Global.getVar('MOD_NAME')
    if global_name == 'Secret Hitler: CE' then
        self.setPositionSmooth(START_POS)
        self.setScale(SELF_SCALE)
        self.setLock(true)
    end
end

function onChat(message, player)
    local args = {} -- The arguments following a command
    local command

    for i in string.gmatch(message, "%S+") do
            args[#args + 1] = i
    end

    if args[1] ~= nil then
        command = string.lower(args[1])
    end

    if command == '!calc' then
        if args[2] == nil or args[3] == nil or args[4] == nil then
            player.broadcast('ERROR: Invalid entry. Please enter three numbers after !calc: The number of fascist cards, lib cards, and how many cards to draw.', {1,0,0})
        elseif tonumber(args[2]) == nil or tonumber(args[3]) == nil or tonumber(args[4]) == nil then
            player.broadcast('ERROR: Invalid entry. All three arguments must be numbers', {1,0,0})
        else
            fas = args[2]
            lib = args[3]
            draw = args[4]
            refreshButtons()
            calcValues()
        end
        return false
    end
end

function refreshButtons()
    self.clearButtons()
    self.clearInputs()

    local buttonParam = {click_function = 'nullFunc', label = 'Fas', color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-1.7,0.2,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Lib', color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-0.5,0.2,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 100}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'fasInput', color = stringColorToRGB('Red'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-1.7,0.2,-0.7}, rotation = {0,0,0}, width = 500, height = 174, font_size = 150, value = fas, alignment = 3, validation = 2, tab = 2}
    self.createInput(inputParam)

    local inputParam = {input_function = 'libInput', color = stringColorToRGB('Blue'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-0.5,0.2,-0.7}, rotation = {0,0,0}, width = 500, height = 174, font_size = 150, value = lib, alignment = 3, validation = 2, tab = 2}
    self.createInput(inputParam)

    local buttonParam = {click_function = 'decFas', label = '-', color = stringColorToRGB('White'), function_owner = self,
        position = {-1.95,0.2,-0.25}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'incFas', label = '+', color = stringColorToRGB('White'), function_owner = self,
        position = {-1.45,0.2,-0.25}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'decLib', label = '-', color = stringColorToRGB('White'), function_owner = self,
        position = {-0.75,0.2,-0.25}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'incLib', label = '+', color = stringColorToRGB('White'), function_owner = self,
        position = {-0.25,0.2,-0.25}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Draw:', color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-1.9,0.2,0.25}, rotation = {0,0,0}, width = 0, height = 0, font_size = 100}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'drawInput', color = stringColorToRGB('Purple'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-1.4,0.2,0.25}, rotation = {0,0,0}, width = 150, height = 123, font_size = 100, value = draw, alignment = 3, validation = 2, tab = 2}
    self.createInput(inputParam)

    local buttonParam = {click_function = 'resetFunc', label = 'Reset', color = stringColorToRGB('White'), function_owner = self,
        position = {-0.5,0.2,0.25}, rotation = {0,0,0}, width = 500, height = 200, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'calcValues', label = 'Calc', color = stringColorToRGB('Green'), function_owner = self,
        position = {-1.1,0.2,0.9}, rotation = {0,0,0}, width = 1100, height = 300, font_size = 150, tooltip = 'Type !calc [0000FF]Lib [FF0000]Fas [FF00FF]Draw [FFFFFF]in chat to calculate stats.'}
    self.createButton(buttonParam)

    for i = 1,6 do
        local buttonParam = {click_function = 'nullFunc', label = nameLabels[i], color = {0,0,0,1}, function_owner = self,
            position = {COL[1],0.2,ROW[i]}, rotation = {0,0,0}, width = 0, height = 0, font_size = 80}
        if i == 1 then
            if valLabels[i] == nil then
                buttonParam.font_color = {1, 1, 1}
            else
                local value = tonumber(string.sub(valLabels[i],1,-2))/100
                buttonParam.font_color = {1-value, 0, value}
            end
        else
            buttonParam.font_color = {(draw-i+2)/draw, 0, (i-2)/draw}
        end
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = valLabels[i], color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {COL[2],0.2,ROW[i]}, rotation = {0,0,0}, width = 0, height = 0, font_size = 80}
        self.createButton(buttonParam)
    end

    for i = 7,12 do
        local buttonParam = {click_function = 'nullFunc', label = nameLabels[i], color = {0,0,0,1}, function_owner = self,
            position = {COL[3],0.2,ROW[i-6]}, rotation = {0,0,0}, width = 0, height = 0, font_size = 80}
        buttonParam.font_color = {(draw-i+2)/draw, 0, (i-2)/draw}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = valLabels[i], color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {COL[4],0.2,ROW[i-6]}, rotation = {0,0,0}, width = 0, height = 0, font_size = 80}
        self.createButton(buttonParam)
    end
end

function nullFunc() end

function decFas()
    local tab = self.getInputs()
    if tab[1].value == '' then
        fas = 0
    else
        fas = tonumber(tab[1].value)
        if fas > 0 then
            fas = fas - 1
        end
    end
    refreshButtons()
end

function incFas()
    local tab = self.getInputs()
    if tab[1].value == '' then
        fas = 1
    else
        fas = tonumber(tab[1].value)
        fas = fas + 1
    end
    refreshButtons()
end

function decLib()
    local tab = self.getInputs()
    if tab[2].value == '' then
        lib = 0
    else
        lib = tonumber(tab[2].value)
        if lib > 0 then
            lib = lib - 1
        end
    end
    refreshButtons()
end

function incLib()
    local tab = self.getInputs()
    if tab[2].value == '' then
        lib = 1
    else
        lib = tonumber(tab[2].value)
        lib = lib + 1
    end
    refreshButtons()
end

function fasInput(obj, playerColor, input_value, stillEditing)
    if not stillEditing then
        if tonumber(input_value) < 0 then
            input_value = 0
        end
        fas = input_value
        refreshButtons()
    end
end

function libInput(obj, playerColor, input_value, stillEditing)
    if not stillEditing then
        if tonumber(input_value) < 0 then
            input_value = 0
        end
        lib = input_value
        refreshButtons()
    end
end

function drawInput(obj, playerColor, input_value, stillEditing)
    if not stillEditing then
        if tonumber(input_value) < 1 then
            input_value = 1
        elseif tonumber(input_value) > 10 then
            input_value = 10
        end
        draw = input_value
        refreshLabels()
        refreshButtons()
    end
end

function refreshLabels()
    local name
    nameLabels = {}
    valLabels = {}
    table.insert(nameLabels, '1+ L')
    for i = 0,draw do
        name = draw-i .. 'F ' .. i .. 'L'
        table.insert(nameLabels, name)
    end
end

function resetFunc()
    fas = 11
    lib = 6
    draw = 3
    refreshLabels()
    refreshButtons()
end

function calcValues(objectButton, playerColor)
    local tab = self.getInputs()
    if tab[1].value == '' then
        fas = 0
    else
        fas = tonumber(tab[1].value)
    end
    if fas < 0 then
        fas = 0
    end

    if tab[2].value == '' then
        lib = 0
    else
        lib = tonumber(tab[2].value)
    end
    if lib < 0 then
        lib = 0
    end

    if tab[3].value == '' then
        draw = 3
    else
        draw = tonumber(tab[3].value)
    end
    if draw > 10 then
        draw = 10
    end
    if draw < 1 then
        draw = 1
    end
    refreshLabels()

    local totalCards = lib + fas
    local denom, numer = 1,1
    local value, numLibs, numFas
    local name, broadcastColor

    if totalCards < draw then
        broadcastToAll('Error: Not enough cards to draw', {1,0,0})
        return
    end

    for i = 0, draw-1 do
        denom = denom * (totalCards - i)
    end
    valLabels = {}
    for numLibs = 0, draw do
        numer = 1
        for i = 1, numLibs do
            numer = numer * (lib - i + 1)
        end
        numFas = draw - numLibs
        for i = 1, numFas do
            numer = numer * (fas - i + 1)
        end
        value = round(numer/denom * combi(draw, numLibs) * 100)
        table.insert(valLabels, value..'%')

        if numLibs == 0 then
            value = 100 - value
            table.insert(valLabels, 1, value..'%')
        end
    end

    broadcastToAll(fas .. 'F, ' .. lib .. 'L, draw ' .. draw .. ':', {1,1,1})
    for i = 1, draw+2 do
        if i == 1 then
            broadcastColor = {0,0,1}
        else
            broadcastColor = {(draw-i+2)/draw, 0, (i-2)/draw}
        end
        broadcastToAll(nameLabels[i] .. ': [FFFFFF]' .. valLabels[i], broadcastColor)
    end

    refreshButtons()
end

function round(n)
    return n % 1 >= 0.5 and math.ceil(n) or math.floor(n)
end

function combi(n, k)
    local function factorial(x)
        if x == 0 then
            return 1
        else
            local product = 1
            for i = x,1,-1 do
                product = product * i
            end
            return product
        end
    end
    return factorial(n)/(factorial(k) * factorial(n-k))
end
