--[[
SH Expansion Tool
Made by Sionar
--]]


------------------Constants
COLOR_TABLE = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Tan', 'Maroon'}
COLOR_RGB = {'[FFFFFF]', '[703A16]', '[DA1917]', '[F3631C]', '[E6E42B]', '[30B22A]', '[20B09A]', '[1E87FF]', '[9F1FEF]', '[F46FCD]', '[D2B48C]', '[800000]'}
DRAW_ZONE_GUID = '6463d3'
DISCARD_ZONE_GUID = 'b9bd6e'
EFFECT_ZONE_GUID = '374a16'
ABILITY_ZONE_GUID = 'eea120'
LIBERALPARTY_CARD_GUID = 'a73564'
FASCISTPARTY_CARD_GUID = 'e4d489'
PLAYER_BUTTON_POS_10P = {{-1.4,0.1,0.7}, {-1.4,0.1,1.1}, {-2.0,0.1,1.1}, {-2.0,0.1,0.7}, {-2,0.1,0.3}, {-2,0.1,-0.1}, {-2,0.1,-0.5}, {-1.4,0.1,-0.5}, {-1.4,0.1,-0.1}, {-1.4,0.1,0.3}}
TARGET_BUTTON_POS_10P = {{0.3,0.1,0.7}, {0.3,0.1,1.1}, {-0.3,0.1,1.1}, {-0.3,0.1,0.7}, {-0.3,0.1,0.3}, {-0.3,0.1,-0.1}, {-0.3,0.1,-0.5}, {0.3,0.1,-0.5}, {0.3,0.1,-0.1}, {0.3,0.1,0.3}}
PLAYER_BUTTON_POS_12P = {{-2.12,0.1,0.6},{-2.26,0.1,0.3},{-2.26,0.1,0},{-2.26,0.1,-0.3},{-2.12,0.1,-0.6},{-1.7,0.1,-0.6},{-1.28,0.1,-0.6},{-1.14,0.1,-0.3},{-1.14,0.1,0},{-1.14,0.1,0.3},{-1.28,0.1,0.6},{-1.7,0.1,0.6}}
TARGET_BUTTON_POS_12P = {{-0.42,0.1,0.6},{-0.56,0.1,0.3},{-0.56,0.1,0},{-0.56,0.1,-0.3},{-0.42,0.1,-0.6},{0,0.1,-0.6},{0.42,0.1,-0.6},{0.56,0.1,-0.3},{0.56,0.1,0},{0.56,0.1,0.3},{0.42,0.1,0.6},{0,0.1,0.6}}
GIVE_TOOL_BUTTON_POS = {{1,0.1,0.9}, {0,0.1,0.9}, {-1,0.1,0.9}, {-1.7,0.1,0.3}, {-1.7,0.1,-0.3}, {-1,0.1,-0.9}, {0,0.1,-0.9}, {1,0.1,-0.9}, {1.7,0.1,-0.3}, {1.7,0.1,0.3}}
MAROON_DRAW_POS = {-9, 1.5, -49}
TAN_DRAW_POS = {20.30, 1.5, -49}
GREY_PLAYABLE_COLORS = {'Tan', 'Maroon'}
------------------Variables
state = 0
player = ""
targSelected = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
numSelected = 0
drawNum = 1
option = 0
promOnly = true
gambleTable = {White = '', Brown = '', Red = '', Orange = '', Yellow = '', Green = '', Teal = '', Blue = '', Purple = '', Pink = '', Tan = '', Brown = '' }
efName = ''


------------------Load Save
function onLoad(saveString)
    clearValues()
    math.randomseed(os.time())
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        state = save['st']
        promOnly = save['pr']
        gambleTable = save['g'] or gambleTable
    end
    refreshButtons()
    self.setDescription('v ' .. VERSION .. '\nMade by Sionar\nUse with SH Consolidator Edition workshop mod.')
end

function onSave()
    local save = {}
    save['st'] = state
    save['pr'] = promOnly
    save['g'] = gambleTable
    local saveString = JSON.encode(save)
    return saveString
end


------------------Main Functions
function decDraw()
    if drawNum ~= 1 then
        drawNum = drawNum - 1
    end
    drawMenu()
end

function incDraw()
    drawNum = drawNum + 1
    drawMenu()
end
function decaDraw()
    if drawNum ~= 1 then
        drawNum = drawNum - 1
    end
    abilitydrawMenu()
end

function incaDraw()
    drawNum = drawNum + 1
    abilitydrawMenu()
end


function abilitydrawStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        local abilityDeck = getDeckFromZoneByGUID(ABILITY_ZONE_GUID)
        if abilityDeck == nil then
            broadcastToColor("ERROR: Ability deck not found.", playerColor, {1,0,0})
            return
        end
        abilityDeck.shuffle()
        abilitydrawcards(drawNum)
      end
        mainMenu()
    end

function abilitydrawcards(drawNum)
    local abilityDeck = getDeckFromZoneByGUID(ABILITY_ZONE_GUID)
    local pos1 = abilityDeck.getPosition()
    local rotUp = {x = 0, y = 180, z = 0}
    local rotDown = {x = 0, y = 180, z = 180}
    local allObjs = getAllObjects()
	local tmpObj
        for i = 1, drawNum do
        local params = {index = 1}
        local card = abilityDeck.takeObject(params)
        giveObjectToPlayer(card, player, {forward = 16.5, right = 0, up = 0}, rotDown)
      end
    end

function drawStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        local drawDeck = getDeckFromZoneByGUID('6463d3')
        if drawDeck == nil then
            broadcastToColor("ERROR: Policy deck not found.", playerColor, {1,0,0})
            return
        end
        Global.call('callFunction', {fcn = 'drawCards', params = {drawNum, player}})
        if drawNum >= 6 or drawNum > drawDeck.getQuantity() then
            startShufTimer()
        end
        returnFunc()
    end
end

function sdStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        local lib, fas, random = 0, 0, 0
        local inspectedRoles = {}
        local players = Global.getTable('players')
        local roles = Global.getTable('roles')
        local numPlayers = #players
        numPlayers = (numPlayers - numPlayers%2)/2

        if numSelected < numPlayers then
            broadcastToColor("ERROR: Not enough players selected", playerColor, {1,0,0})
            return
        elseif numSelected > numPlayers then
            broadcastToColor("ERROR: Too many players selected", playerColor, {1,0,0})
            return
        end
        if player == "" then
            broadcastToColor("ERROR: Inspector not selected", playerColor, {1,0,0})
            return
        end

        local broadcastString = player .. " inspects "
        for i = 1,12 do
            if targSelected[i] == 1 then
                broadcastString = broadcastString .. COLOR_TABLE[i] .. " "
                if roles[COLOR_TABLE[i]] == "liberal" then
                    table.insert(inspectedRoles, "liberal")
                else
                    table.insert(inspectedRoles, "fascist")
                end
            end
        end
        random = math.random(1,numSelected)
        table.remove(inspectedRoles, random)
        for i = 1, numSelected-1 do
            if inspectedRoles[i] == "liberal" then
                lib = lib + 1
            else
                fas = fas + 1
            end
        end
        broadcastToAll(broadcastString, {1,1,1})
        broadcastToColor12P("You found " .. lib .. " liberals and " .. fas .. " fascists.", player, {1,1,1})

        returnFunc()
    end
end

function spyStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        Global.call('removeInspect')
        Global.call('callFunction', {fcn = 'createInspectButtons', params = {player}})
        local options = Global.getTable('options')
        if options.autoNotate then
            Global.call('callFunction', {fcn = 'notateInfo', params = {player, 'inspects', '', '', true}})
        end
        returnFunc()
    end
end

function inspectStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected", playerColor, {1,0,0})
            return
        end
        if numSelected == 0 then
            broadcastToColor("ERROR: Target not selected", playerColor, {1,0,0})
            return
        end

        local roles = Global.getTable('roles')
        local broadcastString = player .. " inspects "
        local inspectMessage
        for i = 1,12 do
            if targSelected[i] == 1 then
                broadcastString = broadcastString .. COLOR_TABLE[i] .. " "
                if roles[COLOR_TABLE[i]] == "liberal" then
                    inspectMessage = COLOR_TABLE[i] .. " is a Liberal!"
                    broadcastToColor12P(inspectMessage, player, {0,0,1})
                else
                    inspectMessage = COLOR_TABLE[i] .. " is a Fascist!"
                    broadcastToColor12P(inspectMessage, player, {1,0,0})
                end
            end
        end
        broadcastToAll(broadcastString, {1,1,1})

        returnFunc()
    end
end

function spelunStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        local tmpDeck = getDeckFromZoneByGUID(DISCARD_ZONE_GUID)
        if tmpDeck == nil then
            broadcastToColor("ERROR: Discard pile not found.", playerColor, {1,0,0})
            return
        end

        local params = {index = option}
        local card = tmpDeck.takeObject(params)
        local delta = {forward = 0, right = 0, up = 0}
        if player == 'Tan' or player == 'Maroon' then
            delta = {forward = 2.66, right = -9, up = 0}
        end
        giveObjectToPlayer(card, player, delta, {x = 0, y = 180, z = 180})
        local broadcastString
        if option == 0 then
            broadcastString = player .. " looks at the top card of the discard pile"
        else
            broadcastString = player .. " looks at the second card of the discard pile"
        end
        broadcastToAll(broadcastString, {1,1,1})

        returnFunc()
    end
end

function gambleStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
        local abilityDeck = getDeckFromZoneByGUID(ABILITY_ZONE_GUID)

        if drawDeck == nil then
            broadcastToColor("ERROR: Policy deck not found.", playerColor, {1,0,0})
            return
        end

        if abilityDeck == nil then
            broadcastToColor("ERROR: Ability deck not found.", playerColor, {1,0,0})
            return
        end

        startLuaCoroutine(self, 'gambleCoroutine')
        mainMenu()
    end
end

function gambleCoroutine()
    local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
    local deckTable = drawDeck.getObjects()
    local abilityDeck = getDeckFromZoneByGUID(ABILITY_ZONE_GUID)
    local pos1 = abilityDeck.getPosition()
    local rotUp = {x = 0, y = 180, z = 0}
    local rotDown = {x = 0, y = 180, z = 180}
    local broadcastString = player.." bet on a "
    local allObjs = getAllObjects()
	local tmpObj
    local gambleResult
    for _, tmpObj in ipairs(allObjs) do
        tmpPos = tmpObj.getPosition()
        if tmpObj.getName() ~= '' and tmpObj.getName() == gambleTable[player]  then
            tmpObj.setPositionSmooth(pos1)
            tmpObj.setRotationSmooth(rotDown)
            sleep(2)
        end
    end
    abilityDeck.shuffle()
    if option == 1 then
        broadcastString = broadcastString .. "Liberal policy card and "
    else
        broadcastString = broadcastString .. "Fascist policy card and "
    end
    if (deckTable[1].description == "Liberal Policy" and option == 1) or (deckTable[1].description == "Fascist Policy" and option == 0) then
        broadcastString = broadcastString .. "won!"
        local params = {index = 1}
        local card = abilityDeck.takeObject(params)
        giveObjectToPlayer(card, player, {forward = 16.5, right = 0, up = 0}, rotDown)
        gambleTable[player] = card.getName()
        gambleResult = 'w'
    else
        broadcastString = broadcastString .. "lost!"
        gambleResult = 'l'
    end

    ---Scoreboard code
    local tab = getAllObjects()
    for _, v in pairs(tab) do
        if string.match(v.getName(), "Scoreboard") then
            tmpObj = v
            break
        end
    end
    if tmpObj ~= nil then
        tmpObj.call('recGamble', {player, gambleResult})
    end
    ---
    broadcastToAll(broadcastString, {1,1,1})
    local pos2 = drawDeck.getPosition()

    local params = {index = 0}
    local card = drawDeck.takeObject(params)
    card.setPosition({pos2['x'], pos2['y']+1, pos2['z']})
    card.setRotationSmooth({rotUp['x'], rotUp['y'], rotUp['z']})
    sleep(3)
    card.setRotationSmooth({rotDown['x'], rotDown['y'], rotDown['z']})
    sleep(1)
    drawDeck.shuffle()
    clearValues()
    return 1
end

function fisherStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        local discDeck = getDeckFromZoneByGUID(DISCARD_ZONE_GUID)
        local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
        local ph
        if discDeck == nil then
            broadcastToColor("ERROR: Discard pile not found.", playerColor, {1,0,0})
            return
        end
        if discDeck.getQuantity() < 4 then
            broadcastToColor("ERROR: Not enough cards in the discard pile.", playerColor, {1,0,0})
            return
        end
        discDeck.shuffle()

    	if player ~= 'Maroon' and player ~= 'Tan' then
            discDeck.dealToColor(3, player)
        else
            if player == 'Maroon' then
                ph = MAROON_DRAW_POS
            else
                ph = TAN_DRAW_POS
            end
            function fishCoroutine()
                sleep(0.5)
                local takeParam = {}
                takeParam.position = ph
                for i = 1, 3 do
                    discDeck.takeObject(takeParam)
                    takeParam.position[2] = takeParam.position[2] + 0.01
                    sleep(0.1)
                end
                return 1
            end
            startLuaCoroutine(self, 'fishCoroutine')
        end

        local broadcastString = player .. " draws 3 cards from the discard pile."
        broadcastToAll(broadcastString, {1,1,1})
        startShufTimer()

        returnFunc()
    end
end

function martyrStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
        if drawDeck == nil then
            broadcastToColor("ERROR: Policy deck not found.", playerColor, {1,0,0})
            return
        end

        reshuffle()
        Wait.time(martyrStart2, 1)
    end
end

function martyrStart2()
    local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
    local deckTable = drawDeck.getObjects()
    local size = drawDeck.getQuantity()
    local found = 0
    found = getIndex(option, size, deckTable, "Liberal Policy", "Fascist Policy")
    local broadcastString
    if option == 0 then
        broadcastString = player .. " played a Liberal policy card and died!"
    else
        broadcastString = player .. " played a Fascist policy card and died!"
    end
    broadcastToAll(broadcastString, {1,1,1})
    local params = {index = found-1}

    local card = drawDeck.takeObject(params)
    local delta = {forward = 0, right = 0, up = 0}
    if player == 'Tan' or player == 'Maroon' then
        delta = {forward = 2.66, right = -9, up = 0}
    end
    giveObjectToPlayer(card, player, delta, {x = 0, y = 180, z = 180})
    reshuffle()
    Global.setVar('lastPres', player)
    Global.setVar('lastChan', player)
    --[[
    local playerStat = Global.getTable('playerStatus')
    playerStat[player] = 5
    Global.setTable('playerStatus', playerStat)
    Global.call('refreshStatusButtons')
    --]]
    returnFunc()
end

function startShufTimer()
    Wait.time(shufCheck, 1)
end

function shufCheck()
    if Global.call('allPolicyCardsKnown') then
        Wait.time(shufStart, 0.3)
    else
        startShufTimer()
    end
end

function shufStart()
    local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
    if drawDeck == nil then
        broadcastToColor("ERROR: Policy deck not found.", playerColor, {1,0,0})
        return
    end
    drawDeck.shuffle()
end

function passedStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        Global.setVar('votePassed', true)
		Global.setVar('blockDraw', false)
    end
end

function reshufStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        reshuffle()

        returnFunc()
    end
end

function givepStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then

        if numSelected == 0 then
            broadcastToColor("ERROR: Target not selected", playerColor, {1,0,0})
            return
        end

        startLuaCoroutine(self, 'givePCoroutine')
    end
end

function givePCoroutine()
    local roles = Global.getTable('roles')
    local broadcastString
    local card, cardClone
    local params = {}

    for i = 1,12 do
        if targSelected[i] == 1 then
            if roles[COLOR_TABLE[i]] == "liberal" then
                broadcastString = COLOR_TABLE[i] .. " is a Liberal!"
                broadcastToAll(broadcastString, {0,0,1})
                card = getObjectFromGUID(LIBERALPARTY_CARD_GUID)
            else
                broadcastString = COLOR_TABLE[i] .. " is a Fascist!"
                broadcastToAll(broadcastString, {1,0,0})
                card = getObjectFromGUID(FASCISTPARTY_CARD_GUID)
            end
            params.position = {0, 100, 0}
            cardClone = card.clone(params)
            cardClone.setLock(false)
            cardClone.interactable = true
            giveObjectToPlayer(cardClone, COLOR_TABLE[i], {forward = 16.5, right = 0, up = 0}, {x = 0, y = 180, z = 0})
            sleep(0.1)
        end

    end
    returnFunc()
    return 1
end

function giveEfStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        local effectDeck = getDeckFromZoneByGUID(EFFECT_ZONE_GUID)
        if player == "" then
            broadcastToColor("ERROR: Player not selected.", playerColor, {1,0,0})
            return
        end
        if effectDeck == nil then
            broadcastToColor("ERROR: Effect deck not found.", playerColor, {1,0,0})
            return
        end
        startLuaCoroutine(self, 'giveEFCoroutine')
    end
end

function giveEFCoroutine()
    local tab = self.getInputs()
    local effectDeck = getDeckFromZoneByGUID(EFFECT_ZONE_GUID)
    local deckTable = effectDeck.getObjects()
    local size = effectDeck.getQuantity()
    local found = 0
    local params = {}
    local card
    local tmpString, tmpStartIndex, tmpEndIndex

    if option == 0 then
        for i = 1,size do
            if deckTable[i].name ~= 'Card' then
                tmpString = deckTable[i].name
            else
                tmpString = deckTable[i].description
                tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                tmpString = string.sub(tmpString, 1, tmpEndIndex)
            end
            if string.match(tmpString, 'Poisoned Drink 1') then
                found = 1
                break
            elseif string.match(tmpString, 'Poisoned Drink 2') then
                found = 2
                break
            end
        end
        if found == 0 then
            broadcastToAll('ERROR: Poisoner effect cards not found in effects deck.', {1,0,0})
            clearValues()
            mainMenu()
            return 1
        end

        for i = size,1,-1 do
            if deckTable[i].name ~= 'Card' then
                tmpString = deckTable[i].name
            else
                tmpString = deckTable[i].description
                tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                tmpString = string.sub(tmpString, 1, tmpEndIndex)
            end
            if string.match(tmpString, 'Poisoned Drink ' .. found) or string.match(tmpString, 'Water ' .. found) then
                params = {index = i-1}
                card = effectDeck.takeObject(params)
                giveObjectToPlayer(card, player, {forward = 16.5, right = 0, up = 0}, {x = 0, y = 180, z = 180})
                sleep(0.1)
            end
        end
        broadcastToAll('The Poisoner effect cards have been dealt to ' .. player .. '.', {1,1,1})
    elseif option == 1 then
        for i = 1,size do
            if deckTable[i].name ~= 'Card' then
                tmpString = deckTable[i].name
            else
                tmpString = deckTable[i].description
                tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                tmpString = string.sub(tmpString, 1, tmpEndIndex)
            end
            if string.match(tmpString, 'Inspected 1') then
                found = 1
                break
            elseif string.match(tmpString,'Inspected 2') then
                found = 2
                break
            end
        end
        if found == 0 then
            broadcastToAll('ERROR: Inspected effect cards not found in effects deck.', {1,0,0})
            clearValues()
            mainMenu()
            return 1
        end
        for i = size,1,-1 do
            if deckTable[i].name ~= 'Card' then
                tmpString = deckTable[i].name
            else
                tmpString = deckTable[i].description
                tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                tmpString = string.sub(tmpString, 1, tmpEndIndex)
            end
            if string.match(tmpString, 'Inspected ' .. found) then
                params = {index = i-1}
                card = effectDeck.takeObject(params)
                giveObjectToPlayer(card, player, {forward = 16.5, right = 0, up = 0}, {x = 0, y = 180, z = 0})
                sleep(0.1)
            end
        end
        broadcastToAll('The Detective effect cards have been dealt to ' .. player .. '.', {1,1,1})
    elseif option == 2 then
        for i = 1,size do
            if deckTable[i].name ~= 'Card' then
                tmpString = deckTable[i].name
            else
                tmpString = deckTable[i].description
                tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                tmpString = string.sub(tmpString, 1, tmpEndIndex)
            end
            if string.match(tmpString, 'Artifact') then
                found = 1
                break
            end

        end
        if found == 0 then
            broadcastToAll('ERROR: Artifact effect cards not found in effects deck.', {1,0,0})
            clearValues()
            mainMenu()
            return 1
        end

        for i = size,1,-1 do
            if deckTable[i].name ~= 'Card' then
                tmpString = deckTable[i].name
            else
                tmpString = deckTable[i].description
                tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                tmpString = string.sub(tmpString, 1, tmpEndIndex)
            end
            if string.match(tmpString, 'Artifact') then
                params = {index = i-1}
                card = effectDeck.takeObject(params)
                giveObjectToPlayer(card, player, {forward = 16.5, right = 0, up = 0}, {x = 0, y = 180, z = 180})
                sleep(0.1)
            end
        end
        broadcastToAll('The Artifact effect cards have been dealt to ' .. player .. '.', {1,1,1})
    else
        for i = size,1,-1 do
            if deckTable[i].name ~= 'Card' then
                tmpString = deckTable[i].name
            else
                tmpString = deckTable[i].description
                tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                tmpString = string.sub(tmpString, 1, tmpEndIndex-1)
            end
            if tmpString == efName then
                found = i
                params = {index = i-1, flip = true}
                card = effectDeck.takeObject(params)
                giveObjectToPlayer(card, player, {forward = 16.5, right = 0, up = 0}, {x = 0, y = 180, z = 0})
                broadcastToAll('The ' .. tmpString .. ' [FFFFFF]effect card has been dealt to ' .. player .. '.', {1,1,1})
                break
            end
        end
        if found == 0 then
            broadcastToAll('ERROR: Effect card with name ' .. efName .. ' not found in effects deck.', {1,0,0})
        end
    end
    efName = ''
    clearValues()
    mainMenu()
    return 1
end

function randStart(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        local targs = {}
        local randNum, temp, colorString
        local broadcastString = 'Random order: '
        for i = 1, 12 do
            if targSelected[i] == 1 then
                colorString = COLOR_RGB[i] .. COLOR_TABLE[i]
                table.insert(targs, colorString)
            end
        end

        for i = #targs, 1, -1 do
            randNum = math.random(1, i)
            temp = targs[randNum]
            targs[randNum] = targs[i]
            targs[i] = temp
        end

        for i = 1, #targs do
            broadcastString = broadcastString .. targs[i] .. ' '
        end
        broadcastToAll(broadcastString, {1,1,1})
        clearValues()
        mainMenu()
    end
end


function giveTool(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        self.setLock(true)
        local tempScale = self.getScale()[1]
        self.scale(1/tempScale)
        self.scale(5.8)
        local pos = {forward = -13, right = 0, up = 3}
        local rot = {x = 0, y = 180, z = 0}
        local options = Global.getTable('options')
        if options.zoneType ~= 6 then
            if COLOR_TABLE[index] == 'Purple' or COLOR_TABLE[index] == 'Orange' then
                pos['right'] = 5
            elseif COLOR_TABLE[index] == 'Pink' or COLOR_TABLE[index] == 'Yellow' then
                pos['right'] = -5
            end
        end
        giveObjectToPlayer(self, COLOR_TABLE[index], pos, rot)
        returnFunc()
    end
end

for k = 1,10 do
    _G['giveTool' .. k] = function(obj, col)
        giveTool(obj, col, k)
    end
end

function promStart(clickedButton, playerColor)
    if Player[playerColor].admin then
        if promOnly == true then
            promOnly = false
            broadcastToAll("Expansion tool access has been granted to all users", {1,1,1})
        else
            promOnly = true
            broadcastToAll("Expansion tool access has been granted to promoted users only", {1,1,1})
        end
    end
    mainMenu()
end

function lockStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        lock()
    end
end

function returnFunc()
    state = 0
    clearValues()
    mainMenu()
end

function reshuffle()
    local pos
    local tmpDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
    if tmpDeck then
        pos = tmpDeck.getPosition()
    else
        local tmpZone = getObjectFromGUID(DRAW_ZONE_GUID)
        pos = tmpZone.getPosition()
    end
    local discardDeck = getDeckFromZoneByGUID(DISCARD_ZONE_GUID)
    if discardDeck == nil then
        tmpZone = getObjectFromGUID(DISCARD_ZONE_GUID)
        local tab = tmpZone.getObjects()
        if tab[2] ~= nil then
            tab[2].setPositionSmooth({pos['x'], pos['y'], pos['z']}, false, true)
        end
    end

    if discardDeck ~= nil then
        discardDeck.setPositionSmooth({pos['x'], pos['y'], pos['z']}, false, true)
    end
    startLuaCoroutine(self, 'shuffleCoroutine')
    broadcastToAll('Deck reshuffled', {1,1,1})
end

function shuffleCoroutine()
    sleep(1)
    local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
    drawDeck.shuffle()
    return 1
end

function lock()
    local abilityDeck = getDeckFromZoneByGUID(ABILITY_ZONE_GUID)
    local effectDeck = getDeckFromZoneByGUID(EFFECT_ZONE_GUID)
    if abilityDeck == nil then
        broadcastToColor("ERROR: Ability deck not found", playerColor, {1,0,0})
        return
    end

    if abilityDeck.interactable == false then
        broadcastToAll("The ability deck has been unlocked", {1,1,1})
    else
        broadcastToAll("The ability deck has been locked", {1,1,1})
    end
    abilityDeck.interactable = not abilityDeck.interactable
    effectDeck.interactable = not effectDeck.interactable
    mainMenu()
end

function opt0()  option = 0   refreshButtons()    end
function opt1()  option = 1   refreshButtons()    end
function opt2()  option = 2   refreshButtons()    end

function getIndex(flag, size, table, string1, string2)
    for i = 1,size,1 do
        if flag == 0 then
            if table[i].description == string1 then
                return i
            end
        else
            if table[i].description == string2 then
                return i
            end
        end
    end
    return -1
end

function sleep(numSeconds)
	local t0 = os.clock()
	while os.clock() - t0 <= numSeconds do
        coroutine.yield(0)
    end
end

function giveObjectToPlayer(object, playerColor, posAdd, rotAdd, ...)
	local pos
	local rot
	local vForward
	local vRight
	local vUp

	if playerColor == 'Maroon' or playerColor == 'Tan' then
        local greyPlayerHandGuids = Global.getTable('greyPlayerHandGuids')
		local ph = getObjectFromGUID(greyPlayerHandGuids[playerColor])
		if ph then
			pos = ph.getPosition()
			pos = {x = pos['x'], y = pos['y'], z = pos['z'] - 2.26}
			rot = ph.getRotation()
			vForward = ph.getTransformForward()
			vRight = ph.getTransformRight()
			vUp = ph.getTransformUp()
		end
	else
		local ph = Player[playerColor].getPlayerHand();
		if ph then
			pos = {x = ph['pos_x'], y = ph['pos_y'], z = ph['pos_z']}
			rot = {x = ph['rot_x'], y = ph['rot_y'], z = ph['rot_z']}
			vForward = {x = ph['trigger_forward_x'], y = ph['trigger_forward_y'], z = ph['trigger_forward_z']}
			vRight = {x = ph['trigger_right_x'], y = ph['trigger_right_y'], z = ph['trigger_right_z']}
			vUp = {x = ph['trigger_up_x'], y = ph['trigger_up_y'], z = ph['trigger_up_z']}
		end
	end

	if pos then
		if rotAdd['exactRot'] then
			object.setRotationSmooth({rotAdd['x'], rotAdd['y'], rotAdd['z']}, ...)
		else
			object.setRotationSmooth({rot['x'] + rotAdd['x'], rot['y'] + rotAdd['y'], rot['z'] + rotAdd['z']}, ...)
		end
		if posAdd['forceHeight'] then
			object.setPositionSmooth({pos['x'] + vForward['x'] * posAdd['forward'] + vRight['x'] * posAdd['right'] + vUp['x'] * posAdd['up'],
											  posAdd['forceHeight'],
											  pos['z'] + vForward['z'] * posAdd['forward'] + vRight['z'] * posAdd['right'] + vUp['z'] * posAdd['up']}, ...)
		else
			object.setPositionSmooth({pos['x'] + vForward['x'] * posAdd['forward'] + vRight['x'] * posAdd['right'] + vUp['x'] * posAdd['up'],
											  pos['y'] + vForward['y'] * posAdd['forward'] + vRight['y'] * posAdd['right'] + vUp['y'] * posAdd['up'],
											  pos['z'] + vForward['z'] * posAdd['forward'] + vRight['z'] * posAdd['right'] + vUp['z'] * posAdd['up']}, ...)
		end
	end
end

function inTable(tableIn, valueIn)
	local value
	if tableIn then
		for _, value in pairs(tableIn) do
			if value == valueIn then
				return true
			end
		end
	end
	return false
end

function getDeckFromZoneByGUID(guidIn)
	local deck = nil
	local deck_ct = 0
	local zone = getObjectFromGUID(guidIn)
	local object

	if zone then
		local inZone = zone.getObjects()
		for _, object in ipairs(inZone) do
			if object.name == 'Card' then
				deck_ct = 2
			elseif object.name == 'Deck' then
				deck = object
				deck_ct = deck_ct + 1
			elseif object.name == 'DeckCustom' then
				deck = object
				deck_ct = deck_ct + 1
			end
		end
	end
	if deck_ct == 1 then
		return deck
	end
	return nil
end

function RGB(color)
	if color == 'Tan' then
		return {r = 210/255, g = 180/255, b = 140/255}
	elseif color == 'Maroon' then
		return {r = 128/255, g = 0/255, b = 0/255}
	else
		return stringColorToRGB(color)
	end
end

function greyPlayer(color)
	if type(color) == 'table' then
		color = color[1]
	end
	if inTable(GREY_PLAYABLE_COLORS, color) then
		return true
	else
		return false
	end
end

function getPlayerObj(color)
	if greyPlayer(color) then
		local playerFound = nil
		steamId = greyPlayerSteamIds[color]
		for _, player in ipairs(Player.getSpectators()) do
			if steamId == player.steam_id then
				playerFound = player
				break
			end
		end
		return playerFound
	else
		return Player[color]
	end
end

function broadcastToColor12P(message, playerColor, messageColor)
	local player = getPlayerObj(playerColor)
	player.broadcast(message, messageColor)
end


------------------User Interface
function nulFunc()
end

function mainMenu()
    self.clearButtons()
    self.clearInputs()

    local buttonParam = {click_function = 'drawMenu', label = "Draw", color = {1,1,1}, function_owner = self,
        position = {-1.7,0.1,-0.85}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'sdMenu', label = "Detective", color = {1,1,1}, function_owner = self,
        position = {-1.7,0.1,-0.25}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'spyMenu', label = "Spy", color = {1,1,1}, function_owner = self,
        position = {-1.7,0.1,0.35}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'inspMenu', label = "Inspect", color = {1,1,1}, function_owner = self,
        position = {-1.7,0.1,0.95}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'spelunMenu', label = "Spelunker", color = {1,1,1}, function_owner = self,
        position = {-0.575,0.1,-0.85}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'gambleMenu', label = "Gambler", color = {1,1,1}, function_owner = self,
        position = {-0.575,0.1,-0.25}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'fisherMenu', label = "Fisherman", color = {1,1,1}, function_owner = self,
        position = {-0.575,0.1,0.35}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'martyrMenu', label = "Martyr", color = {1,1,1}, function_owner = self,
        position = {-0.575,0.1,0.95}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'shufStart', label = "Shuffle\nDeck", color = {1,1,1}, function_owner = self,
        position = {0.575,0.1,-0.85}, rotation = {0,0,0}, width = 500, height = 275, font_size = 90}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'passedStart', label = "Vote\nPassed", color = {1,1,1}, function_owner = self,
        position = {0.575,0.1,-0.25}, rotation = {0,0,0}, width = 500, height = 275, font_size = 90}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'reshufMenu', label = "Reshuffle", color = {1,1,1}, function_owner = self,
        position = {0.575,0.1,0.35}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'givepMenu', label = "Give\nParty Card", color = {1,1,1}, function_owner = self,
        position = {0.575,0.1,0.95}, rotation = {0,0,0}, width = 500, height = 275, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'promStart', function_owner = self, label = '☆', color = {0,0,0,0.8}, font_color = stringColorToRGB('Green'),
        position = {1.9,0.1,-1.2}, width = 100, height = 100, font_size = 80, tooltip = 'Toggle Promoted Only'}
    if promOnly == true then
        buttonParam.label = '★'
    end
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'givetMenu', function_owner = self, label = '☆', color = {0,0,0,0.8}, font_color = stringColorToRGB('Red'),
        position = {2.2,0.1,-1.2}, width = 100, height = 100, font_size = 80, tooltip = 'Give Tool to:'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'abilitydrawMenu', label = "Ability\nDraw", color = {1,1,1}, function_owner = self,
        position = {1.7,0.1,-0.85}, rotation = {0,0,0}, width = 500, height = 275, font_size = 90}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'randMenu', label = 'Random\nColor', color = {1,1,1}, function_owner = self,
        position = {1.7,0.1,-0.25}, rotation = {0,0,0}, width = 500, height = 275, font_size = 70}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'lockStart', label = "Toggle Lock\nDecks", color = {1,1,1}, function_owner = self,
        position = {1.7,0.1,0.35}, rotation = {0,0,0}, width = 500, height = 275, font_size = 70}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'giveEfMenu', label = "Deal\nEffect Cards", color = {1,1,1}, function_owner = self,
        position = {1.7,0.1,0.95}, rotation = {0,0,0}, width = 500, height = 275, font_size = 70}
    self.createButton(buttonParam)
end

function abilitydrawMenu()
    self.clearButtons()
    self.clearInputs()
    state = 14

    local buttonParam = {click_function = 'nulFunc', label = "Draw", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'drawInput', label = drawNum, color = {0,0,0}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.5}, rotation = {0,0,0}, width = 300, height = 200, font_size = 150, alignment = 3, validation = 2}
    self.createInput(inputParam)

    local buttonParam = {click_function = 'decaDraw', label = "-", color = stringColorToRGB('White'), function_owner = self,
        position = {-0.25,0.1,0}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'incaDraw', label = "+", color = stringColorToRGB('White'), function_owner = self,
        position = {0.25,0.1,0}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function drawMenu()
    self.clearButtons()
    self.clearInputs()
    state = 1

    local buttonParam = {click_function = 'nulFunc', label = "Draw", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'drawInput', label = drawNum, color = {0,0,0}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.5}, rotation = {0,0,0}, width = 300, height = 200, font_size = 150, alignment = 3, validation = 2}
    self.createInput(inputParam)

    local buttonParam = {click_function = 'decDraw', label = "-", color = stringColorToRGB('White'), function_owner = self,
        position = {-0.25,0.1,0}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'incDraw', label = "+", color = stringColorToRGB('White'), function_owner = self,
        position = {0.25,0.1,0}, rotation = {0,0,0}, width = 250, height = 100, font_size = 150}
    self.createButton(buttonParam)

    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function drawInput()
    local tab = self.getInputs()
    if tab[1].value == '' then
        drawNum = 1
    else
        drawNum = tonumber(tab[1].value)
    end
    return drawNum
end

function sdMenu()
    self.clearButtons()
    state = 2

    createTargetButtons()
    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function spyMenu()
    self.clearButtons()
    state = 3

    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function inspMenu()
    self.clearButtons()
    state = 4

    createTargetButtons()
    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function spelunMenu()
    self.clearButtons()
    state = 5

    local buttonParam = {click_function = 'opt0', label = "Top Card", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.3}, rotation = {0,0,0}, width = 500, height = 300}
    if option == 0 then
        buttonParam.font_size = 150
    else
        buttonParam.font_size = 50
    end
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'opt1', label = "Second Card", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,0.3}, rotation = {0,0,0}, width = 500, height = 300}
    if option == 0 then
        buttonParam.font_size = 50
    else
        buttonParam.font_size = 150
    end
    self.createButton(buttonParam)

    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function gambleMenu()
    self.clearButtons()
    state = 6

    local buttonParam = {click_function = 'opt0', label = "Fascist", color = {1,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.3}, rotation = {0,0,0}, width = 500, height = 300}
    if option == 0 then
        buttonParam.font_size = 150
    else
        buttonParam.font_size = 50
    end
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'opt1', label = "Liberal", color = {0,0,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,0.3}, rotation = {0,0,0}, width = 500, height = 300}
    if option == 0 then
        buttonParam.font_size = 50
    else
        buttonParam.font_size = 150
    end
    self.createButton(buttonParam)

    createPlayerButtons()
    createLabelButton()
    createStartButton()
    createReturnButton()
end

function martyrMenu()
    self.clearButtons()
    state = 7

    createLibFasButtons()
    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end


function givepMenu()
    self.clearButtons()
    state = 8

    createLabelButton()
    createTargetButtons()
    createStartButton()
    createReturnButton()
end

function giveEfMenu()
    self.clearButtons()
    self.clearInputs()
    state = 9

    local buttonParam = {click_function = 'opt0', label = "Poisoner", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.5}, rotation = {0,0,0}, width = 800, height = 200, font_size = 80}
    if option == 0 then
        buttonParam.font_color = stringColorToRGB('Red')
    end
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'opt1', label = "Detective", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.1}, rotation = {0,0,0}, width = 800, height = 200, font_size = 80}
    if option == 1 then
        buttonParam.font_color = stringColorToRGB('Red')
    end
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'opt2', label = "Artifacts", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,0.3}, rotation = {0,0,0}, width = 800, height = 200, font_size = 80}
    if option == 2 then
        buttonParam.font_color = stringColorToRGB('Red')
    end
    self.createButton(buttonParam)

    local inputParam = {input_function = 'efInputFunc', function_owner = self, color = stringColorToRGB('White'), function_owner = self, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {0,0.1,0.7}, rotation = {0,0,0}, width = 800, height = 103, font_size = 80, alignment = 3, validation = 1, tab = 1, label = 'Enter effect name', value = efName}
    self.createInput(inputParam)

    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function efInputFunc(obj, color, input, stillEditing)
    if not stillEditing then
        local effectDeck = getDeckFromZoneByGUID(EFFECT_ZONE_GUID)
        if effectDeck ~= nil then
            local deckTable = effectDeck.getObjects()
            local size = effectDeck.getQuantity()
            local tmpString, tmpStartIndex, tmpEndIndex
            for i = 1,size do
                if deckTable[i].name ~= 'Card' then
                    tmpString = deckTable[i].name
                else
                    tmpString = deckTable[i].description
                    tmpStartIndex, tmpEndIndex = string.find(tmpString, '\n')
                    tmpString = string.sub(tmpString, 1, tmpEndIndex-1)
                end

                if string.match(string.lower(tmpString), string.lower(input)) and input ~= '' then
                    efName = tmpString
                    break
                else
                    efName = input
                end
            end
        end
        option = 3
        return 1
    end
end

function reshufMenu()
    self.clearButtons()
    state = 10

    createLabelButton()
    createStartButton()
    createReturnButton()
end

function givetMenu()
    self.clearButtons()
    state = 11

    for i = 1,10 do
        local buttonParam = {click_function = 'giveTool' .. i, label = COLOR_TABLE[i], color = RGB(COLOR_TABLE[i]), function_owner = self,
            position = GIVE_TOOL_BUTTON_POS[i], rotation = {0,0,0}, width = 500, height = 300, font_size = 100}
        self.createButton(buttonParam)
    end

    local buttonParam = {click_function = 'returnFunc', label = "Cancel", color = {1,1,1,0.8}, function_owner = self,
        position = {0,0.1,0}, rotation = {0,0,0}, width = 500, height = 300, font_size = 100}
    self.createButton(buttonParam)
end

function fisherMenu()
    self.clearButtons()
    state = 12

    createLabelButton()
    createPlayerButtons()
    createStartButton()
    createReturnButton()
end

function randMenu()
    self.clearButtons()
    state = 13

    createLabelButton()
    createRandTargetButtons()
    createStartButton()
    createReturnButton()

    local buttonParam = {click_function = 'randSelAll', label = "Select All", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.3}, rotation = {0,0,0}, width = 500, height = 300, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'randDeselAll', label = "Deselect All", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,0.3}, rotation = {0,0,0}, width = 500, height = 300, font_size = 100}
    self.createButton(buttonParam)
end

function randSelAll(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        local options = Global.getTable('options')
        if options.zoneType == 6 then
            targSelected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
        else
            targSelected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0}
        end
        refreshButtons()
    end
end

function randDeselAll(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        targSelected = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        refreshButtons()
    end
end

function createStartButton()
    local buttonParam = {label = "Start", color = {1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.7,0.1,-0.3}, rotation = {0,0,0}, width = 500, height = 300, font_size = 150}
    if     state == 1 then          buttonParam.click_function = 'drawStart'
    elseif state == 2 then          buttonParam.click_function = 'sdStart'
    elseif state == 3 then          buttonParam.click_function = 'spyStart'
    elseif state == 4 then          buttonParam.click_function = 'inspectStart'
    elseif state == 5 then          buttonParam.click_function = 'spelunStart'
    elseif state == 6 then          buttonParam.click_function = 'gambleStart'
    elseif state == 7 then          buttonParam.click_function = 'martyrStart'
    elseif state == 8 then          buttonParam.click_function = 'givepStart'
    elseif state == 9 then          buttonParam.click_function = 'giveEfStart'
    elseif state == 10 then         buttonParam.click_function = 'reshufStart'
    elseif state == 12 then         buttonParam.click_function = 'fisherStart'
    elseif state == 13 then         buttonParam.click_function = 'randStart'
    elseif state == 14 then         buttonParam.click_function = 'abilitydrawStart'
    end
    self.createButton(buttonParam)
end

function createReturnButton()
    local buttonParam = {click_function = 'returnFunc', label = "Cancel", color = {1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.7,0.1,0.3}, rotation = {0,0,0}, width = 500, height = 300, font_size = 150}
    self.createButton(buttonParam)
end

function createPlayerButtons()
    local options = Global.getTable('options')
    local iLimit, posTable
    local buttonParam = {}
    if options.zoneType == 6 then
        iLimit = 12
        posTable = PLAYER_BUTTON_POS_12P
        buttonParam.width = 200
    else
        iLimit = 10
        posTable = PLAYER_BUTTON_POS_10P
        buttonParam.width = 300
    end

    for i = 1,iLimit do
        buttonParam.click_function = 'setPlayer' .. i
        buttonParam.label = COLOR_TABLE[i]
        buttonParam.function_owner = self
        buttonParam.position = posTable[i]
        buttonParam.font_color = RGB(COLOR_TABLE[i])
        buttonParam.font_size = 50

        if player == COLOR_TABLE[i] then
            buttonParam.color = RGB(COLOR_TABLE[i])
        else
            buttonParam.color = {0,0,0,1}
        end
        self.createButton(buttonParam)
    end
end


function createTargetButtons()
    local options = Global.getTable('options')
    local iLimit, posTable
    local buttonParam = {}

    if state ~= 8 then
        local buttonParam = {click_function = 'nulFunc', label = "Inspected", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.1,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150}
        self.createButton(buttonParam)
    end

    if options.zoneType == 6 then
        iLimit = 12
        posTable = TARGET_BUTTON_POS_12P
        buttonParam.width = 200
    else
        iLimit = 10
        posTable = TARGET_BUTTON_POS_10P
        buttonParam.width = 300
    end

    for i = 1,iLimit do
        buttonParam.click_function = 'setTargets' .. i
        buttonParam.label = COLOR_TABLE[i]
        buttonParam.function_owner = self
        buttonParam.position = posTable[i]
        buttonParam.font_color = RGB(COLOR_TABLE[i])
        buttonParam.font_size = 50

        if targSelected[i] == 1 then
            buttonParam.color = RGB(COLOR_TABLE[i])
        else
            buttonParam.color = {0,0,0,1}
        end
        self.createButton(buttonParam)
    end
end

function createRandTargetButtons()
    local options = Global.getTable('options')
    local iLimit, posTable
    local buttonParam = {}

    if options.zoneType == 6 then
        iLimit = 12
        posTable = PLAYER_BUTTON_POS_12P
        buttonParam.width = 200
    else
        iLimit = 10
        posTable = PLAYER_BUTTON_POS_10P
        buttonParam.width = 300
    end

    for i = 1,iLimit do
        buttonParam.click_function = 'setTargets' .. i
        buttonParam.label = COLOR_TABLE[i]
        buttonParam.function_owner = self
        buttonParam.position = posTable[i]
        buttonParam.font_color = RGB(COLOR_TABLE[i])
        buttonParam.font_size = 50

        if targSelected[i] == 1 then
            buttonParam.color = RGB(COLOR_TABLE[i])
        else
            buttonParam.color = {0,0,0,1}
        end
        self.createButton(buttonParam)
    end
end

function createLabelButton()
    local buttonParam = {click_function = 'nulFunc', color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {-1.7,0.1,-1}, rotation = {0,0,0}, width = 1, height = 1, font_size = 150}
    if      state == 1 then         buttonParam.label = "Player"
    elseif  state == 2 then         buttonParam.label = "Detective"
    elseif  state == 3 then         buttonParam.label = "Spy"
    elseif  state == 4 then         buttonParam.label = "Inspector"
    elseif  state == 5 then         buttonParam.label = "Spelunker"
    elseif  state == 6 then         buttonParam.label = "Gambler"
    elseif  state == 7 then         buttonParam.label = "Martyr"
    elseif  state == 8 then         buttonParam.label = "Give Party\nCard"
    elseif  state == 9 then         buttonParam.label = "Deal\nEffects"
    elseif  state == 10 then        buttonParam.label = "Reshuffle"
    elseif  state == 12 then        buttonParam.label = "Fisherman"
    elseif  state == 13 then        buttonParam.label = "Random\nColor"
    elseif  state == 14 then        buttonParam.label = "Player"
    end
    self.createButton(buttonParam)
end

function createLibFasButtons()
    local buttonParam = {click_function = 'opt0', label = "Liberal", color = {0,0,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,-0.3}, rotation = {0,0,0}, width = 500, height = 300}
    if option == 0 then
        buttonParam.font_size = 150
    else
        buttonParam.font_size = 50
    end
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'opt1', label = "Fascist", color = {1,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.1,0.3}, rotation = {0,0,0}, width = 500, height = 300}
    if option == 0 then
        buttonParam.font_size = 50
    else
        buttonParam.font_size = 150
    end
    self.createButton(buttonParam)
end

function setPlayer(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        player = COLOR_TABLE[index]
        refreshButtons()
    end
end

for k = 1,12 do
    _G['setPlayer' .. k] = function(obj, col)
        setPlayer(obj, col, k)
    end
end

function setTargets(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        if targSelected[index] == 0 then
            targSelected[index] = 1
            numSelected = numSelected + 1
        else
            targSelected[index] = 0
            numSelected = numSelected -1
        end
        refreshButtons()
    end
end

for k = 1,12 do
    _G['setTargets' .. k] = function(obj, col)
        setTargets(obj, col, k)
    end
end

function refreshButtons()
    if state == 0 then
        mainMenu()
    elseif state == 1 then
        drawMenu()
    elseif state == 2 then
        sdMenu()
    elseif state == 3 then
        spyMenu()
    elseif state == 4 then
        inspMenu()
    elseif state == 5 then
        spelunMenu()
    elseif state == 6 then
        gambleMenu()
    elseif state == 7 then
        martyrMenu()
    elseif state == 8 then
        givepMenu()
    elseif state == 9 then
        giveEfMenu()
    elseif state == 10 then
        reshufMenu()
    elseif state == 11 then
        givetMenu()
    elseif state == 12 then
        fisherMenu()
    elseif state == 13 then
        randMenu()
    elseif state == 14 then
       abilitydrawMenu()
    end
end

function clearValues()
    self.clearInputs()
    player = ""
    targSelected = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    numSelected = 0
    drawNum = 1
    option = 0
    efName = ''
end
