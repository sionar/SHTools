--[[
SH Expansion Box
Made by Sionar, Lost Savage and Hmmmpf
--]]


------------------Constants
UPDATE_VERSION = 105
ADD_ON_VERSION = 6
BOX_OBJECTS_NUM = 11
ADD_ON_NAME = 'Expansion Deck'
ABILITY_DECK_NAME = 'Abilities'
EFFECT_DECK_NAME = 'Effects'
ABILITY_REFERENCE_NAME = 'Ability Reference'
EFFECT_REFERENCE_NAME = 'Effect Reference'
TOOL_NAME = 'SH Expansion Tool'
RULEBOOK_NAME = 'SH Expansion Rulebook'
LINE_DRAWER_NAME = 'Line Drawer'
CALC_NAME = 'Secret Hitler Probability Calc'
DRAFT_NAME = 'Ability Drafter'
PLAYER_DECK_NAME = 'Players'
PEFFECT_DECK_NAME = 'Player Effects'
PLAYER_REFERENCE_NAME = 'Player Reference'
SELF_NAME = 'Secret Hitler Expansion Box'
TIMER_NAME = 'Timer'
SELF_POS = {20, 1.71, 11}
SELF_SCALE = {2.5, 2.5, 2.5}
SHOWN_ROT = {0,180,0}
HIDDEN_ROT = {0,180,180}
DEFAULT_POS = {0,1,0}
ABILITY_DECK_POS = {-20, 2, 6.25}
EFFECT_DECK_POS = {20, 2, 6.25}
PLAYER_DECK_POS = {20, 2, 0}
TOOL_POS = {-8,2,-16}
LINE_DRAWER_POS = {8,2,-16}
RULEBOOK_POS = {100, 1.1, -22}
DRAFT_POS = {-20, 1.06, 0}

PACKING_LIST = {
   'Abilities',
   'Effects',
   'SH Expansion Tool',
   'SH Expansion Rulebook',
   'Ability Reference',
   'Effect Reference',
   'Rounds Until Poisoning',
   'Rounds Until Death',
   'Rounds Until Aegis Expires',
   'Line Drawer',
   'Secret Hitler Probability Calc',
   'Ability Drafter',
   'Players',
   'Player Effects',
   'Darthvader Effect Deck',
   'Player Reference',
   'Rounds Until Armageddon',
   'Rounds Until Swap',
   'Gold',
   'Secret Hitler Expansion Box',
   'Timer',
}


------------------Functions
function onLoad(saveString)
	Wait.time(setupExpansion, 0.3)
	self.setDescription('v ' .. VERSION .. '\nMade by Piggy and Sionar')
end

function setupExpansion()
	local global_name = Global.getVar('MOD_NAME')
	local global_version = Global.getVar('UPDATE_VERSION')
	local global_add_on = Global.getVar('ADD_ON_VERSION')
	local started = Global.getVar('started')
	if not global_add_on then global_add_on = 1 end

	if not global_version or global_name ~= 'Secret Hitler: CE' then
		printToAll('ERROR: Secret Hitler: CE not found.', {1,0,0})
	else
		if global_version < UPDATE_VERSION or global_add_on < ADD_ON_VERSION then
			printToAll('ERROR: Secret Hitler: CE version is too old; try updating.', {1,0,0})
		else
			if ADD_ON_VERSION < global_add_on then
				printToAll('ERROR: Add on is too old; try updating.', {1,0,0})
			else
				if started then
					printToAll('ERROR: Can not add this option. Game has already started.', {1,0,0})
				else
					if #self.getObjects() >= BOX_OBJECTS_NUM then
						local lastVote_guids = Global.getTable('lastVote_guids')

						for _, lastVoteGuid in ipairs(lastVote_guids) do
							local lastVote = getObjectFromGUID(lastVoteGuid)
							if lastVote then
								local txtValue = lastVote.TextTool.getValue()
								if txtValue == 'Last Vote' then
									txtValue = 'Extra Options: ' .. ADD_ON_NAME
								elseif not string.match(txtValue, ADD_ON_NAME) then
									txtValue = txtValue .. ', ' .. ADD_ON_NAME
								end
								lastVote.TextTool.setValue(txtValue)
							end
						end

						local options = Global.getTable('options')
						options.expansionAmount = 3
						options.expansionOptionEnabled = 5
						options.policySafety = false
						options.shufflePlayers = true
						options.shuffleHost = false
						options.voteHistory = true
						if options.zoneType ~= 6 then
							options.zoneType = 5
						end
						Global.setTable('options', options)
						Global.call('refreshExpansionButtons')
						if options.zoneType ~= 6 then
							Global.call('refreshHiddenZones')
						end
						deleteOldObjects()
						Wait.time(unpackObjects,3)
						createSnapPoints()
					end
				end
			end
		end
	end
end

function deleteOldObjects()
	local allObjs = getAllObjects()
	   for _, tmpObj in ipairs(allObjs) do
		  if inTable(PACKING_LIST, tmpObj.getName()) and tmpObj.getGUID() ~= self.getGUID() then
			 tmpObj.destruct()
		  end
	   end
end

function unpackObjects()
	self.setPosition(SELF_POS)
	self.setScale(SELF_SCALE)
	self.setName(SELF_NAME)
	self.setLock(true)

	local objList = self.getObjects()
	local params = {}

	for _, v in ipairs(objList) do
		if v.name == ABILITY_DECK_NAME then
			params.rotation = HIDDEN_ROT
			params.guid = v.guid
			params.position = ABILITY_DECK_POS
			self.takeObject(params)
		end
		if v.name == EFFECT_DECK_NAME then
			params.rotation = HIDDEN_ROT
			params.guid = v.guid
			params.position = EFFECT_DECK_POS
			self.takeObject(params)
		end
		if v.name == ABILITY_REFERENCE_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = DEFAULT_POS
			self.takeObject(params)
		end
		if v.name == EFFECT_REFERENCE_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = DEFAULT_POS
			self.takeObject(params)
		end
		if v.name == TOOL_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = TOOL_POS
			self.takeObject(params)
		end
		if v.name == RULEBOOK_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = RULEBOOK_POS
			self.takeObject(params)
		end
		if v.name == LINE_DRAWER_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = LINE_DRAWER_POS
			self.takeObject(params)
		end
		if v.name == CALC_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = DEFAULT_POS
			self.takeObject(params)
		end
		if v.name == DRAFT_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = DRAFT_POS
			self.takeObject(params)
		end
		if v.name == PLAYER_DECK_NAME then
			params.rotation = HIDDEN_ROT
			params.guid = v.guid
			params.position = PLAYER_DECK_POS
			self.takeObject(params)
		end
		if v.name == PEFFECT_DECK_NAME then
			params.rotation = HIDDEN_ROT
			params.guid = v.guid
			params.position = EFFECT_DECK_POS
			self.takeObject(params)
		end
		if v.name == PLAYER_REFERENCE_NAME then
			params.rotation = SHOWN_ROT
			params.guid = v.guid
			params.position = DEFAULT_POS
			self.takeObject(params)
		end
        if v.name == TIMER_NAME then
            params.rotation = SHOWN_ROT
            params.guid = v.guid
            params.position = DEFAULT_POS
            self.takeObject(params)
        end
	end

	return true
end

function createSnapPoints()
	Global.setSnapPoints(
	{
	    {
	        position = {9.67,0.96,-18.9},
	        rotation = {0,180,0},
	        rotation_snap = true
	    },
		{
	        position = {13,0.96,-18.9},
	        rotation = {0,180,0},
	        rotation_snap = true
	    },
		{
			position = {13,0.96,-23.6},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {9.67,0.96,-23.6},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {-19.63,0.96,-18.9},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {-19.63,0.96,-23.6},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {-16.3,0.96,-18.9},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {-16.3,0.96,-23.6},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {33.97,0.96,-18.9},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {37.3,0.96,-18.9},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {33.97,0.96,-23.6},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {37.3,0.96,-23.6},
			rotation = {0,180,0},
			rotation_snap = true
		},
		{
			position = {36.9,0.96,-4.98},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {36.9,0.96,-1.65},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {41.6,0.96,-4.98},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {41.6,0.96,-1.65},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {36.9,0.96,16.87},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {36.9,0.96,20.2},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {41.6,0.96,16.87},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {41.6,0.96,20.2},
			rotation = {0,90,0},
			rotation_snap = true
		},
		{
			position = {19.63,0.96,18.9},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {16.3,0.96,18.9},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {19.63,0.96,23.6},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {16.3,0.96,23.6},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-9.67,0.96,18.9},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-13,0.96,18.9},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-9.67,0.96,23.6},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-13.0,0.96,23.6},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-33.97,0.96,18.9},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-37.3,0.96,18.9},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-33.97,0.96,23.6},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-37.3,0.96,23.6},
			rotation = {0,0,0},
			rotation_snap = true
		},
		{
			position = {-36.9,0.96,4.98},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {-41.6,0.96,4.98},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {-36.9,0.96,1.65},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {-41.6,0.96,1.65},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {-36.9,0.96,-16.87},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {-36.9,0.96,-20.2},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {-41.6,0.96,-16.87},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {-41.6,0.96,-20.2},
			rotation = {0,270,0},
			rotation_snap = true
		},
		{
			position = {20,0.96,0},
			rotation = {0,180,0},
			rotation_snap = true
		},
	}
	)
end

function inTable(tableIn, valueIn)
	local value
	if tableIn then
		for _, value in pairs(tableIn) do
			if value == valueIn then
				return true
			end
		end
	end
	return false
end
