--[[
SH Scoreboard
Made by Sionar
--]]


------------------Constants
VERSION = '1.8.2'
DEBUG = false
COLOR_TABLE = {'White', 'Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Pink', 'Teal', 'Brown'}
BUTT_W = 1
BUTT_H = 1
BUTT_B_COLOR = {0,0,0,1}
COL_S = -1.5
ROW_S = -1.6
COL_W = 0.5
ROW_W = 0.25
COL = {COL_S + 0 * COL_W - 0.1, COL_S + 1 * COL_W, COL_S + 2 * COL_W, COL_S + 3 * COL_W, COL_S + 4 * COL_W, COL_S + 5 * COL_W, COL_S + 6 * COL_W}
ROW = {ROW_S + 0 * COL_W, ROW_S + 1 * ROW_W, ROW_S + 2 * ROW_W, ROW_S + 3 * ROW_W, ROW_S + 4 * ROW_W, ROW_S + 5 * ROW_W, ROW_S + 6 * ROW_W, ROW_S + 7 * ROW_W, ROW_S + 8 * ROW_W, ROW_S + 9 * ROW_W, ROW_S + 10 * ROW_W}
START_POS = {x = 100, y = 1.1, z = 8}


------------------Variables
db = {}
saveStorage = {}
winStorage = {}
name = {}
gamesPlayed = {}
libWR = {}
fasWR = {}
hitWR = {}
fhWR = {}
totWR = {}
gnum = {}
gwr = {}
lrat = {}
frat = {}
namesDisp = {}
gamesDisp = {}
ratesDisp = {}
passHash = ''
recordCheck = false
startTime = 0
minGames = 10
startRank = 1
fWins = 0
lWins = 0
state = 0
saveNames = {'Name 1', 'Name 2', 'Name 3', 'Name 4'}
roles = Global.getTable('roles')
sessionPlayers = {}


------------------Events
function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        passHash = save['pH']
        deserialize(save['dbStr'])
        fWins = save['fw']
        lWins = save['lw']
        saveNames = save['sn']
        saveStorage = save['dbs'] or saveStorage
        sessionPlayers = save['sp'] or {}
    end

    roles = Global.getTable('roles')
    recordCheck = false
    startTime = os.time()
    refreshStart()
    moveBoard()
    checkStarted()
    self.setDescription('v ' .. VERSION .. '\nMade by Sionar')
end

function onSave()
    local save = {}
    save['pH'] = passHash
    save['dbStr'] = serialize()
    save['fw'] = fWins
    save['lw'] = lWins
    save['sn'] = saveNames
    save['dbs'] = saveStorage
    save['sp'] = sessionPlayers
    local saveString = JSON.encode(save)
    return saveString
end

function onChat(message, player)
    local args = {} -- The arguments following a command
    local command

    for i in string.gmatch(message, "%S+") do
            args[#args + 1] = i
    end

    if args[1] ~= nil then
        command = string.lower(args[1])
    end

    if command == '!lu' then
        if args[2] == nil then
            player.broadcast('Please enter a name.', {1,0,0})
            return false
        end
        local key = findPlayer(args[2])
        if key == nil then
            player.broadcast('Player not found.', {1,0,0})
        else
            lookupMenu()
            displayPlayerStats(key)
        end
        return false
    elseif command == '!s1' then
        refreshStart()
        return false
    elseif command == '!s2' then
        refreshMisc()
        return false
    elseif command == '!s3' then
        overStart()
        return false
    elseif command == '!s4' then
        libStart()
        return false
    elseif command == '!s5' then
        fasStart()
        return false
    elseif command == '!rl' then
        if player.admin then
            recLFunc()
        end
        return false
    elseif command == '!rf' then
        if player.admin then
            recFFunc()
        end
        return false
    elseif command == '!up' then
        updateFunc()
        return false
    end
end

function checkStarted()
    Wait.time(checkStartedTimer, 5)
end

function checkStartedTimer()
    local started = Global.getVar('started')
    if started then
        updateFunc()
    else
        checkStarted()
    end
end

function moveBoard()
    local global_name = Global.getVar('MOD_NAME')
    if global_name == 'Secret Hitler: CE' then
        local tab = getAllObjects()
        local foundTab = {}
        for _, v in pairs(tab) do
            if string.match(v.getName(), "Scoreboard") then
                table.insert(foundTab,1,v)
            end
        end
        self.setPositionSmooth({START_POS['x']  + (#foundTab-1) * 30, START_POS['y'], START_POS['z']})
        self.setLock(true)
    end
end

------------------Main Functions
function nullFunc() end

function refreshStart()
    for i = 1, 10 do
        if Player[COLOR_TABLE[i]].seated == false then
            gamesPlayed[i] = ""
            libWR[i] = ""
            fasWR[i] = ""
            hitWR[i] = ""
            fhWR[i] = ""
            totWR[i] = ""
        else
            if db[Player[COLOR_TABLE[i]].steam_id] == nil then
                db[Player[COLOR_TABLE[i]].steam_id] = {lw = 0, fw = 0, hw = 0, lg = 0, fg = 0, hg = 0, gw = 0, gn = 0,
                    sn = Player[COLOR_TABLE[i]].steam_name, fr = 1000, lr = 1000}
            end

            local lw = db[Player[COLOR_TABLE[i]].steam_id].lw
            local fw = db[Player[COLOR_TABLE[i]].steam_id].fw
            local hw = db[Player[COLOR_TABLE[i]].steam_id].hw
            local lg = db[Player[COLOR_TABLE[i]].steam_id].lg
            local fg = db[Player[COLOR_TABLE[i]].steam_id].fg
            local hg = db[Player[COLOR_TABLE[i]].steam_id].hg

            if lg+fg+hg == 0 then
                gamesPlayed[i] = 0
                libWR[i] = "0%"
                fasWR[i] = "0%"
                hitWR[i] = "0%"
                fhWR[i] = "0%"
                totWR[i] = "0%"
            else
                gamesPlayed[i] = lg + fg + hg
                libWR[i] = round(lw/lg * 100) .. "%"
                fasWR[i] = round(fw/fg * 100) .. "%"
                hitWR[i] = round(hw/hg * 100) .. "%"
                fhWR[i] = round((fw+hw)/(fg+hg) * 100) .. "%"
                totWR[i] = round((fw+hw+lw)/(fg+hg+lg) * 100) .. "%"
            end
        end
    end
    mainMenu()
end

function updateStart(clickedObject, playerColor)
    if Player[playerColor].admin then
        updateFunc()
    else
        broadcastToColor("Only promoted players can update the seated players.", playerColor, {1,0,0})
    end
end

function updateFunc()
    local entry = {}
    sessionPlayers = {}
    roles = Global.getTable('roles')
    local players = Global.getTable('players')
    if players ~= nil then
        for k,v in pairs(players) do
            entry = {id = Player[v].steam_id, role = roles[v]}
            table.insert(sessionPlayers,entry)
        end
    end
    broadcastToAll("Seated players updated.", {0,0,1})
    refreshStart()
end

function refreshMisc()
    refreshStart()
    for i = 1,10 do
        if Player[COLOR_TABLE[i]].seated == false then
            gnum[i] = ""
            gwr[i] = ""
            lrat[i] = ""
            frat[i] = ""
        else
            if db[Player[COLOR_TABLE[i]].steam_id].gn == nil then
                db[Player[COLOR_TABLE[i]].steam_id].gn = 0
                db[Player[COLOR_TABLE[i]].steam_id].gw = 0
            end
            gnum[i] = db[Player[COLOR_TABLE[i]].steam_id].gn
            gwr[i] = round(db[Player[COLOR_TABLE[i]].steam_id].gw/db[Player[COLOR_TABLE[i]].steam_id].gn * 100) .. "%"
            lrat[i] = db[Player[COLOR_TABLE[i]].steam_id].lr
            frat[i] = db[Player[COLOR_TABLE[i]].steam_id].fr
        end
    end
    miscMenu()
end

function recLButtonFunc(clickedObject, playerColor)
    if Player[playerColor].admin then
        recLFunc()
    else
        broadcastToColor("Only promoted players can record the game.", playerColor, {1,0,0})
    end
end

function recLFunc()
    if checkValid() then
        for k,v in pairs(sessionPlayers) do
            if v.role == 'liberal' then
                db[v.id].lw = db[v.id].lw + 1
                db[v.id].lg = db[v.id].lg + 1
            elseif v.role == 'fascist' then
                db[v.id].fg = db[v.id].fg + 1
            else
                db[v.id].hg = db[v.id].hg + 1
            end
        end

        lWins = lWins + 1
        broadcastToAll("Liberal victory recorded.", {0,0,1})
        updateRatings('lib')
        onSave()
        refreshStart()
    end
end

function recFButtonFunc(clickedObject, playerColor)
    if Player[playerColor].admin then
        recFFunc()
    else
        broadcastToColor("Only promoted players can record the game.", playerColor, {1,0,0})
    end
end

function recFFunc()
    if checkValid() then
        for k,v in pairs(sessionPlayers) do
            if v.role == 'liberal' then
                db[v.id].lg = db[v.id].lg + 1
            elseif v.role == 'fascist' then
                db[v.id].fw = db[v.id].fw + 1
                db[v.id].fg = db[v.id].fg + 1
            else
                db[v.id].hw = db[v.id].hw + 1
                db[v.id].hg = db[v.id].hg + 1
            end
        end
        fWins = fWins + 1
        broadcastToAll("Fascist victory recorded.", {1,0,0})
        updateRatings('fas')
        onSave()
        refreshStart()
    end
end

function updateRatings(winner)
    local libTeam = {}
    local fasTeam = {}
    local libShare = {}
    local fasShare = {}
    local tLib, tFas = 0, 0
    local aLib, aFas, rLib, rFas, eLib, eFas, sLib, sFas
    for k,v in pairs(sessionPlayers) do
        if v.role == 'liberal' then
            table.insert(libTeam, v.id)
        else
            table.insert(fasTeam, v.id)
        end
    end
    for k,v in pairs(libTeam) do
        tLib = tLib + db[v].lr
    end
    for k,v in pairs(libTeam) do
        libShare[v] = db[v].lr / tLib
    end
    for k,v in pairs(fasTeam) do
        tFas = tFas + db[v].fr
    end
    for k,v in pairs(fasTeam) do
        fasShare[v] = db[v].fr / tFas
    end
    aLib = tLib/#libTeam
    aFas = tFas/#fasTeam
    rLib = math.pow(10,(aLib/400))
    rFas = math.pow(10,(aFas/400))
    eLib = rLib / (rLib + rFas)
    eFas = 1 - eLib
    if winner == 'lib' then
        sLib = 1
        sFas = 0
    else
        sLib = 0
        sFas = 1
    end
    tLib = tLib + 200 * (sLib - eLib)
    tFas = tFas + 200 * (sFas - eFas)
    for k,v in pairs(libTeam) do
        db[v].lr = round(tLib * libShare[v])
    end
    for k,v in pairs(fasTeam) do
        db[v].fr = round(tFas * fasShare[v])
    end
end

function checkValid()
    local started = Global.getVar('started')
    local players = getSeatedPlayers()
    local currTime = os.time()

    if not started then
        broadcastToAll("Error recording game: Game not started.", {1,0,0})
        return false
    elseif recordCheck then
        broadcastToAll("Error recording game: Game already recorded for this session.", {1,0,0})
        return false
    elseif #sessionPlayers < 5 then
        broadcastToAll("Error recording game: Not enough players seated", {1,0,0})
        return false
    elseif currTime - startTime < 30 then
        broadcastToAll("Error recording game: Please wait a couple of minutes before submitting.", {1,0,0})
        return false
    else
        recordCheck = true
        return true
    end
end

function recGamble(params)
    local player = params[1]
    local result = params[2]
    if db[Player[player].steam_id].gn == nil then
        db[Player[player].steam_id].gn = 0
        db[Player[player].steam_id].gw = 0
    end
    db[Player[player].steam_id].gn = db[Player[player].steam_id].gn + 1
    if result == 'w' then
        db[Player[player].steam_id].gw = db[Player[player].steam_id].gw + 1
    end
    if state == 1 then
        refreshMisc()
    end
end

function resFunc(clickedButton, playerColor)
    db = {}
    lWins = 0
    fWins = 0
    adminMenu(clickedButton, playerColor)
end

function storePass(clickedButton, playerColor)
    if Player[playerColor].host then
        local tab = self.getInputs()
        local password = tab[1].value
        if password == "" then
            broadcastToColor("Please enter a password.", playerColor, {1,0,0})
            return
        end
        passHash = hash256(password)
        broadcastToColor("Password stored.", playerColor, {0,0,1})
        adminMenu(clickedObject, playerColor)
    end
end

function clearPass(clickedButton, playerColor)
    if Player[playerColor].host then
        passHash = ''
        broadcastToColor("Password cleared.", playerColor, {0,0,1})
        adminMenu(clickedObject, playerColor)
    else
        broadcastToColor("Only the host can clear the password for the scoreboard.", playerColor, {1,0,0})
    end
end

function checkPass(clickedButton, playerColor)
    if Player[playerColor].admin then
        if passHash == '' then
            broadcastToColor("Please set a password first.", playerColor, {1,0,0})
            return
        end
        local tab = self.getInputs()
        local password = tab[1].value
        passCheck = hash256(password)
        if passHash == passCheck then
            broadcastToColor("Success. Database reset.", playerColor, {0,0,1})
            resFunc(clickedButton, playerColor)
        else
            broadcastToColor("Incorrect password.", playerColor, {1,0,0})
        end
    else
        broadcastToColor("Only promoted players can use the admin functions.", playerColor, {1,0,0})
    end
end

function saveDB(clickedButton,playerColor,index)
    if Player[playerColor].admin then
        local save = {}
        save['dbStr'] = serialize()
        save['fw'] = fWins
        save['lw'] = lWins
        saveStorage[index] = JSON.encode(save)

        local tab = self.getInputs()
        saveNames[index] = tab[index].value
        broadcastString = "Data saved to slot \"" .. tab[index].value .. "\""
        broadcastToColor(broadcastString, playerColor, {0,0,1})
        saveloadMenu(clickedButton, playerColor)
        onSave()
    else
        broadcastToColor("Only promoted players can use the admin functions.", playerColor, {1,0,0})
    end
end

function loadDB(clickedButton,playerColor,index)
    if Player[playerColor].admin then
        if saveStorage[index] == nil then
            db = {}
            fWins = 0
            lWins = 0
        else
            local save = JSON.decode(saveStorage[index])
            local dbStr = save['dbStr']
            fWins = save['fw']
            lWins = save['lw']
            deserialize(dbStr)
        end

        local tab = self.getInputs()
        broadcastString = "Data loaded from slot \"" .. tab[index].value .. "\""
        broadcastToColor(broadcastString, playerColor, {0,0,1})
        refreshStart()
    else
        broadcastToColor("Only promoted players can use the admin functions.", playerColor, {1,0,0})
    end
end

for k = 1,4 do
    _G['saveDB' .. k] = function(obj, col)
        saveDB(obj, col, k)
    end
end

for k = 1,4 do
    _G['loadDB' .. k] = function(obj, col)
        loadDB(obj, col, k)
    end
end

function importFunc(clickedButton,playerColor)
    if Player[playerColor].admin then
        local tab = getAllObjects()
        local oldBoard
        local oldDB
        local foundTab = {}
        for _, v in pairs(tab) do
            if string.match(v.getName(), "Scoreboard") then
                table.insert(foundTab,1,v)
            end
        end
        if #foundTab == 1 then
            broadcastToColor("ERROR: Only one scoreboard found.", playerColor, {1,0,0})
        elseif #foundTab > 2 then
            broadcastToColor("ERROR: Too many scoreboards found.", playerColor, {1,0,0})
        else
            for _, v in pairs(foundTab) do
                if v.getGUID() ~= self.getGUID() then
                    oldBoard = v
                    break
                end
            end

            local dbCopy = oldBoard.getTable('db')
            db = {}
            for v in pairs(dbCopy) do
                if dbCopy[v].fg + dbCopy[v].lg + dbCopy[v].hg > 4 then
                    local entry = {}
                    entry.sn = dbCopy[v].name or dbCopy[v].sn
                    entry.fg = dbCopy[v].fgp or dbCopy[v].fg
                    entry.hg = dbCopy[v].hgp or dbCopy[v].hg
                    entry.lg = dbCopy[v].lgp or dbCopy[v].lg
                    entry.fw = dbCopy[v].fw
                    entry.hw = dbCopy[v].hw
                    entry.lw = dbCopy[v].lw
                    entry.gw = dbCopy[v].gw or dbCopy[v].gamw
                    entry.gn = dbCopy[v].gn or dbCopy[v].gamn
                    entry.fr = dbCopy[v].fr or 1000
                    entry.lr = dbCopy[v].lr or 1000

                    db[v] = entry
                end
            end

            fWins = oldBoard.getVar('fWins')
            lWins = oldBoard.getVar('lWins')

            local hitW = 0
            local hitG = 0

            for v in pairs(db) do
                hitW = hitW + db[v].hw
                hitG = hitG + db[v].hg or db[v].hgp
            end
            if hitG > fWins+lWins then
                fWins = hitW
                lWins = hitG - hitW
            end
            broadcastToColor("SUCCESS: The old records have been migrated to this board.", playerColor, {0,0,1})
            getSteamNames()
        end
        onSave()
    else
        broadcastToColor("Only promoted players can use the admin functions.", playerColor, {1,0,0})
    end
end

function getSteamNames()
    local url
    for v in pairs(db) do
        if db[v].sn == nil then
            url = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=E05421C6A86CAABADE2F700F492FFA4A&steamids=' .. v
            WebRequest.get(url, self, 'getSteamNamesCB')
        end
    end
end

function getSteamNamesCB(req)
    if req.is_done and not req.is_error then
        local response = req.text
        local id = response:match('id": "(.-)",')
        local name = response:match('name": "(.-)",')

        db[id].sn = name
        local j = 0
        for i = 1, 10000 do
            j = j + 1
        end
    end
end

function overLeader()
    local tab = self.getInputs()
    if tab == nil then
        minGames = 10
    else
        startRank = tonumber(tab[1].value)
        minGames = tonumber(tab[2].value)
    end

    local db_copy = {}
    local tempEntry = {}
    for v in pairs(db) do
        if db[v].fg + db[v].hg + db[v].lg >= minGames then
            tempEntry = {}
            tempEntry.sn = db[v].sn or db[v].name
            tempEntry.fg = db[v].fg
            tempEntry.hg = db[v].hg
            tempEntry.lg = db[v].lg
            tempEntry.fw = db[v].fw
            tempEntry.hw = db[v].hw
            tempEntry.lw = db[v].lw
            table.insert(db_copy, tempEntry)
        end
    end

    for v in pairs(db_copy) do
        db_copy[v].wr = (db_copy[v].fw + db_copy[v].hw + db_copy[v].lw) / (db_copy[v].fg + db_copy[v].hg + db_copy[v].lg)
    end

    table.sort(db_copy, comp)
    local endPoint = #db_copy
    if startRank + 9 > endPoint then
        startRank = endPoint - 9
    end
    if startRank < 1 then
        startRank = 1
    end
    if #db_copy < 10 then
        for i=1,#db_copy do
            namesDisp[i] = db_copy[startRank-1+i].sn
            gamesDisp[i] = db_copy[startRank-1+i].fg + db_copy[startRank-1+i].hg + db_copy[startRank-1+i].lg
            ratesDisp[i] = round(db_copy[startRank-1+i].wr * 100) .. "%"
        end
        for i=#db_copy+1,10 do
            namesDisp[i] = ''
            gamesDisp[i] = ''
            ratesDisp[i] = ''
        end
    else
        for i=1,10 do
            namesDisp[i] = db_copy[startRank-1+i].sn
            gamesDisp[i] = db_copy[startRank-1+i].fg + db_copy[startRank-1+i].hg + db_copy[startRank-1+i].lg
            ratesDisp[i] = round(db_copy[startRank-1+i].wr * 100) .. "%"
        end
    end
    overMenu()
end

function libLeader()
    local tab = self.getInputs()
    if tab == nil then
        minGames = 10
    else
        startRank = tonumber(tab[1].value)
        minGames = tonumber(tab[2].value)
    end

    local db_copy = {}
    local tempEntry = {}
    for v in pairs(db) do
        if tonumber(db[v].lg) >= minGames then
            tempEntry = {}
            tempEntry.sn = db[v].sn or db[v].name
            tempEntry.lg = db[v].lg
            tempEntry.lw = db[v].lw
            table.insert(db_copy, tempEntry)
        end
    end

    for v in pairs(db_copy) do
        db_copy[v].wr = (db_copy[v].lw) / (db_copy[v].lg)
    end

    table.sort(db_copy, comp)
    local endPoint = #db_copy
    if startRank + 9 > endPoint then
        startRank = endPoint - 9
    end
    if startRank < 1 then
        startRank = 1
    end
    if #db_copy < 10 then
        for i=1,#db_copy do
            namesDisp[i] = db_copy[startRank-1+i].sn
            gamesDisp[i] = db_copy[startRank-1+i].lg
            ratesDisp[i] = round(db_copy[startRank-1+i].wr * 100) .. "%"
        end
        for i=#db_copy+1,10 do
            namesDisp[i] = ''
            gamesDisp[i] = ''
            ratesDisp[i] = ''
        end
    else
        for i=1,10 do
            namesDisp[i] = db_copy[startRank-1+i].sn
            gamesDisp[i] = db_copy[startRank-1+i].lg
            ratesDisp[i] = round(db_copy[startRank-1+i].wr * 100) .. "%"
        end
    end
    libMenu()
end

function fasLeader()
    local tab = self.getInputs()
    if tab == nil then
        minGames = 10
    else
        startRank = tonumber(tab[1].value)
        minGames = tonumber(tab[2].value)
    end

    local db_copy = {}
    local tempEntry = {}
    for v in pairs(db) do
        if tonumber(db[v].fg + db[v].hg) >= minGames then
            tempEntry = {}
            tempEntry.sn = db[v].name or db[v].sn
            tempEntry.fg = db[v].fg
            tempEntry.hg = db[v].hg
            tempEntry.fw = db[v].fw
            tempEntry.hw = db[v].hw
            table.insert(db_copy, tempEntry)
        end
    end

    for v in pairs(db_copy) do
        db_copy[v].wr = (db_copy[v].fw + db_copy[v].hw) / (db_copy[v].fg + db_copy[v].hg)
    end

    table.sort(db_copy, comp)
    local endPoint = #db_copy
    if startRank + 9 > endPoint then
        startRank = endPoint - 9
    end
    if startRank < 1 then
        startRank = 1
    end
    if #db_copy < 10 then
        for i=1,#db_copy do
            namesDisp[i] = db_copy[startRank-1+i].sn
            gamesDisp[i] = db_copy[i].fg + db_copy[i].hg
            ratesDisp[i] = round(db_copy[startRank-1+i].wr * 100) .. "%"
        end
        for i=#db_copy+1,10 do
            namesDisp[i] = ''
            gamesDisp[i] = ''
            ratesDisp[i] = ''
        end
    else
        for i=1,10 do
            namesDisp[i] = db_copy[startRank-1+i].sn
            gamesDisp[i] = db_copy[startRank-1+i].fg + db_copy[startRank-1+i].hg
            ratesDisp[i] = round(db_copy[startRank-1+i].wr * 100) .. "%"
        end
    end
    fasMenu()
end

function comp(a,b)
    return a.wr > b.wr
end

function round(n)
    return n % 1 >= 0.5 and math.ceil(n) or math.floor(n)
end

function sleep(numSeconds)
	local t0 = os.clock()
	while os.clock() - t0 <= numSeconds do
        coroutine.yield(0)
    end
end

function serialize()
    local dbStr = ''
    local delim = '«█'
    for v in pairs(db) do
        dbStr = dbStr .. v .. delim
        dbStr = dbStr .. db[v].sn .. delim
        dbStr = dbStr .. db[v].fg .. delim
        dbStr = dbStr .. db[v].hg .. delim
        dbStr = dbStr .. db[v].lg .. delim
        dbStr = dbStr .. db[v].fw .. delim
        dbStr = dbStr .. db[v].hw .. delim
        dbStr = dbStr .. db[v].lw .. delim
        dbStr = dbStr .. db[v].gn .. delim
        dbStr = dbStr .. db[v].gw .. delim
        dbStr = dbStr .. db[v].lr .. delim
        dbStr = dbStr .. db[v].fr .. delim
    end
    debug_print(dbStr)
    return dbStr
end

function deserialize(str)
    local mod = 0
    local v
    db = {}
    for word in string.gmatch(str, '([^«█]+)') do
        if mod == 12 then
            mod = 0
        end
        if mod == 0 then
            v = word
            db[v] = {}
        elseif mod == 1 then
            db[v].sn = word
        elseif mod == 2 then
            db[v].fg = word
        elseif mod == 3 then
            db[v].hg = word
        elseif mod == 4 then
            db[v].lg = word
        elseif mod == 5 then
            db[v].fw = word
        elseif mod == 6 then
            db[v].hw = word
        elseif mod == 7 then
            db[v].lw = word
        elseif mod == 8 then
            db[v].gn = word
        elseif mod == 9 then
            db[v].gw = word
        elseif mod == 10 then
            db[v].lr = word
        elseif mod == 11 then
            db[v].fr = word
        end
        mod = mod + 1
    end
end

function debug_print(string)
    if DEBUG then
        print(string)
    end
end


------------------User Interface
function mainMenu()
    self.clearButtons()
    self.clearInputs()
    state = 0
    local buttonParam = {click_function = 'nullFunc', label = "Name", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[1],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 80}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Games\nPlayed", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[2],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Fas\nWinrate", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[3],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Hitler\nWinrate", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[4],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "F+H\nWinrate", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[5],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Lib\nWinrate", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[6],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Total\nWinrate", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[7],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'updateStart', label = "Update\nPlayers", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {-1.6,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = '!up'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'refreshMisc', label = "Misc\nStats", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {-0.96,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = 'Type !s2 in chat to open up this page'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'recLButtonFunc', label = "Record\nLib Win", color = {0,0,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0.32,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = '!rl'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'recFButtonFunc', label = "Record\nFas Win", color = {1,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0.96,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = '!rf'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'adminMenu', label = "Admin", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.6,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50}
    self.createButton(buttonParam)

    local name_size
    for i = 1,10 do
        if Player[COLOR_TABLE[i]].steam_name ~= nil and string.len(Player[COLOR_TABLE[i]].steam_name) > 10 then
            name_size = 30
        else
            name_size = 50
        end

        local buttonParam = {click_function = 'nullFunc', label = Player[COLOR_TABLE[i]].steam_name, color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[1],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = name_size}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = gamesPlayed[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[2],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = fasWR[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[3],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = hitWR[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[4],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = fhWR[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[5],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = libWR[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[6],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = totWR[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[7],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)
    end
end

function miscMenu()
    self.clearButtons()
    self.clearInputs()
    state = 1
    local name_size

    namesDisp = {}
    gamesDisp = {}
    ratesDisp = {}

    local buttonParam = {click_function = 'nullFunc', label = "Name", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[1],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 80}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Liberal\nRating", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[2],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Fascist\nRating", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[3],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Gamble\nAttempts", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[4],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Gamble\nSuccess", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[5],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Total Games\nRecorded", color = BUTT_B_COLOR, font_color = stringColorToRGB('Green'), function_owner = self,
        position = {COL[7],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = lWins+fWins, color = BUTT_B_COLOR, font_color = stringColorToRGB('Green'), function_owner = self,
        position = {COL[7],0.2,ROW[2]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Fascist\nWinrate", color = BUTT_B_COLOR, font_color = stringColorToRGB('Green'), function_owner = self,
        position = {COL[7],0.2,ROW[4]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = round(fWins/(lWins+fWins)*100).."%", color = BUTT_B_COLOR, font_color = stringColorToRGB('Green'), function_owner = self,
        position = {COL[7],0.2,ROW[5]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 100}
    self.createButton(buttonParam)

    for i = 1,10 do
        if Player[COLOR_TABLE[i]].steam_name ~= nil and string.len(Player[COLOR_TABLE[i]].steam_name) > 10 then
            name_size = 30
        else
            name_size = 50
        end
        local buttonParam = {click_function = 'nullFunc', label = Player[COLOR_TABLE[i]].steam_name, color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[1],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = name_size}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = lrat[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[2],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = frat[i], font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[3],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = gnum[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[4],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = gwr[i], font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[5],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)
    end

    createMiscButtons()
end

function createMiscButtons()
    local buttonParam = {click_function = 'refreshStart', label = "Main\nStats", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {-1.6,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = 'Type !s1 in chat to open up this page'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'refreshMisc', label = "Misc\nStats", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {-0.96,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = 'Type !s2 in chat to open up this page'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'overStart', label = "Overall\nLeader\nBoard", color = stringColorToRGB('Purple'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {-0.32,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = 'Type !s3 in chat to open up this page'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'libStart', label = "Liberal\nLeader\nBoard", color = {0,0,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0.32,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = 'Type !s4 in chat to open up this page'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'fasStart', label = "Fascist\nLeader\nBoard", color = {1,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0.96,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = 'Type !s5 in chat to open up this page'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'lookupMenu', label = "Lookup\nPlayer", color = stringColorToRGB('Green'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {1.6,0.2,1.4}, rotation = {0,0,0}, width = 250, height = 200, font_size = 50, tooltip = 'Type !lu [FF0000]player [FFFFFF]in chat to\nlook up stats as a spectator.'}
    self.createButton(buttonParam)
end

function overStart()
    state = 2
    self.clearButtons()
    self.clearInputs()
    overLeader()
end

function libStart()
    state = 3
    self.clearButtons()
    self.clearInputs()
    libLeader()
end

function fasStart()
    state = 4
    self.clearButtons()
    self.clearInputs()
    fasLeader()
end

function overMenu()
    self.clearButtons()
    self.clearInputs()

    local buttonParam = {click_function = 'nullFunc', label = "Name", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[2],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Overall\nGames Played", color = BUTT_B_COLOR, font_color = stringColorToRGB('Purple'), function_owner = self,
        position = {COL[3]+0.2,0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 40}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Overall\nWin Rate", color = BUTT_B_COLOR, font_color = stringColorToRGB('Purple'), function_owner = self,
        position = {COL[4]+0.2,0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 40}
    self.createButton(buttonParam)

    createLeaderValueButtons()
    createMiscButtons()
    createMinButtons()
end

function libMenu()
    self.clearButtons()
    self.clearInputs()

    local buttonParam = {click_function = 'nullFunc', label = "Name", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[2],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Liberal\nGames Played", color = BUTT_B_COLOR, font_color = stringColorToRGB('Blue'), function_owner = self,
        position = {COL[3]+0.2,0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 40}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Liberal\nWin Rate", color = BUTT_B_COLOR, font_color = stringColorToRGB('Blue'), function_owner = self,
        position = {COL[4]+0.2,0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 40}
    self.createButton(buttonParam)

    createLeaderValueButtons()
    createMiscButtons()
    createMinButtons()
end

function fasMenu()
    self.clearButtons()
    self.clearInputs()

    local buttonParam = {click_function = 'nullFunc', label = "Name", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COL[2],0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Fascist\nGames Played", color = BUTT_B_COLOR, font_color = stringColorToRGB('Red'), function_owner = self,
        position = {COL[3]+0.2,0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 40}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = "Fascist\nWin Rate", color = BUTT_B_COLOR, font_color = stringColorToRGB('Red'), function_owner = self,
        position = {COL[4]+0.2,0.2,ROW[1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 40}
    self.createButton(buttonParam)

    createLeaderValueButtons()
    createMiscButtons()
    createMinButtons()
end

function createLeaderValueButtons()
    for i = 1,10 do
        local buttonParam = {click_function = 'nullFunc', label = startRank -1 + i..".", color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[1],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = namesDisp[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[2],0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 40}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = gamesDisp[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[3]+0.2,0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'nullFunc', label = ratesDisp[i], color = BUTT_B_COLOR, font_color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = {COL[4]+0.2,0.2,ROW[i+1]}, rotation = {0,0,0}, width = BUTT_W, height = BUTT_H, font_size = 50}
        self.createButton(buttonParam)
    end
end

function createMinButtons()
    local buttonParam = {click_function = 'nullFunc', label = "Starting\nRank", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {1.2,0.2,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 50}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'rankUpdate', color = stringColorToRGB('White'), function_owner = self, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.2,0.2,-0.75}, rotation = {0,0,0}, width = 400, height = 124, font_size = 100, value = startRank, alignment = 3, validation = 2, tab = 1}
    self.createInput(inputParam)

    local buttonParam = {click_function = 'nullFunc', label = "Minimum\n# Games", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {1.2,0.2,0}, rotation = {0,0,0}, width = 0, height = 0, font_size = 50}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'minUpdate', color = stringColorToRGB('White'), function_owner = self, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.2,0.2,0.25}, rotation = {0,0,0}, width = 400, height = 124, font_size = 100, value = minGames, alignment = 3, validation = 2, tab = 1}
    self.createInput(inputParam)
end

function rankUpdate(obj, player_clicker_color, input_value, selected)
    if not selected then
        startRank = input_value
        if     state == 2 then      overLeader()
        elseif state == 3 then      libLeader()
        elseif state == 4 then      fasLeader()
        end
    end
end

function minUpdate(obj, player_clicker_color, input_value, selected)
    if not selected then
        if     state == 2 then      overLeader()
        elseif state == 3 then      libLeader()
        elseif state == 4 then      fasLeader()
        end
    end
end

function lookupMenu()
    self.clearButtons()
    self.clearInputs()

    local buttonParam = {click_function = 'nullFunc', label = "Steam Name", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-1,0.2,-1.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 50}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('White'), function_owner = self, font_color = stringColorToRGB('Black'),
        position = {-1,0.2,-1.2}, rotation = {0,0,0}, width = 600, height = 150, font_size = 60, alignment = 2, validation = 1, tab = 1}
    self.createInput(inputParam)

    local buttonParam = {click_function = 'nullFunc', label = "Steam ID", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {1,0.2,-1.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 50}
    self.createButton(buttonParam)

    local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('White'), function_owner = self, font_color = stringColorToRGB('Black'),
        position = {1,0.2,-1.2}, rotation = {0,0,0}, width = 600, height = 150, font_size = 60, alignment = 2, validation = 2, tab = 1}
    self.createInput(inputParam)

    local buttonParam = {click_function = 'lookupStart', label = "Lookup", stringColorToRGB('White'), font_color = stringColorToRGB('Black'), function_owner = self,
        position = {0,0.2,-1.2}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80, tooltip = 'Use !lu player in chat to\nlook up stats as a spectator.'}
    self.createButton(buttonParam)

    createMiscButtons()
end

function lookupStart()
    local tab = self.getInputs()
    local steam_name = tab[1].value
    local steam_id = tab[2].value
    local key = nil

    lookupMenu()

    if steam_name ~= '' then
        key = findPlayer(steam_name)
    elseif steam_id ~= '' then
        if db[steam_id] ~= nil then
            key = steam_id
        else
            key = nil
        end
    end

    if key ~= nil then
        displayPlayerStats(key)
    else
        local buttonParam = {click_function = 'nullFunc', label = 'Player not found', color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,-0.8}, rotation = {0,0,0}, width = 0, height = 0, font_size = 80}
        self.createButton(buttonParam)
    end
end

function findPlayer(player_name)
    local playersFound = 0
    local key
    for k,v in pairs(db) do
        if string.match(string.lower(db[k].sn), string.lower(player_name)) then
            playersFound = playersFound + 1
            key = k
        end
    end
    if(playersFound ~= 1) then
        return nil
    end
    return key
end


function displayPlayerStats(id)
    local buttonParam = {click_function = 'nullFunc', label = db[id].sn, color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,0.2,-0.8}, rotation = {0,0,0}, width = 0, height = 0, font_size = 100}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Games Played: ' .. db[id].lg + db[id].fg + db[id].hg, color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-0.8,0.2,-0.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Games Won: ' .. db[id].lw + db[id].fw + db[id].hw, color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-0.8,0.2,-0.3}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Overall Win Rate: ' .. round((db[id].fw+db[id].hw+db[id].lw)/(db[id].fg + db[id].hg + db[id].lg) * 100) .. '%', color = BUTT_B_COLOR, font_color = stringColorToRGB('Purple'), function_owner = self,
        position = {-0.8,0.2,-0.1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = '% of Games as Liberal: ' .. round((db[id].lg)/(db[id].fg + db[id].hg + db[id].lg) * 100) .. '%', color = BUTT_B_COLOR, font_color = stringColorToRGB('Blue'), function_owner = self,
        position = {-0.8,0.2,0.2}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)


    local buttonParam = {click_function = 'nullFunc', label = 'Liberal Games Played: ' .. db[id].lg, color = BUTT_B_COLOR, font_color = stringColorToRGB('Blue'), function_owner = self,
        position = {-0.8,0.2,0.3}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Liberal Games Won: ' .. db[id].lw, color = BUTT_B_COLOR, font_color = stringColorToRGB('Blue'), function_owner = self,
        position = {-0.8,0.2,0.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Liberal Win Rate: ' .. round(db[id].lw/db[id].lg * 100) .. '%', color = BUTT_B_COLOR, font_color = stringColorToRGB('Blue'), function_owner = self,
        position = {-0.8,0.2,0.7}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Liberal Rating: ' .. db[id].lr, color = BUTT_B_COLOR, font_color = stringColorToRGB('Blue'), function_owner = self,
        position = {-0.8,0.2,0.9}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Fascist Games Played: ' .. db[id].fg, color = BUTT_B_COLOR, font_color = stringColorToRGB('Yellow'), function_owner = self,
        position = {0.8,0.2,-0.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Fascist Games Won: ' .. db[id].fw, color = BUTT_B_COLOR, font_color = stringColorToRGB('Yellow'), function_owner = self,
        position = {0.8,0.2,-0.3}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Fascist Win Rate: ' .. round(db[id].fw/db[id].fg * 100) .. '%', color = BUTT_B_COLOR, font_color = stringColorToRGB('Yellow'), function_owner = self,
        position = {0.8,0.2,-0.1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Fas+Hit Win Rate: ' .. round((db[id].hw+db[id].fw)/(db[id].hg + db[id].fg) * 100) .. '%', color = BUTT_B_COLOR, font_color = stringColorToRGB('Orange'), function_owner = self,
        position = {0.8,0.2,0.1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Hitler Games Played: ' .. db[id].hg, color = BUTT_B_COLOR, font_color = stringColorToRGB('Red'), function_owner = self,
        position = {0.8,0.2,0.3}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Hitler Games Won: ' .. db[id].hw, color = BUTT_B_COLOR, font_color = stringColorToRGB('Red'), function_owner = self,
        position = {0.8,0.2,0.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Hitler Win Rate: ' .. round(db[id].hw/db[id].hg * 100) .. '%', color = BUTT_B_COLOR, font_color = stringColorToRGB('Red'), function_owner = self,
        position = {0.8,0.2,0.7}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'nullFunc', label = 'Fascist Rating: ' .. db[id].fr, color = BUTT_B_COLOR, font_color = stringColorToRGB('Red'), function_owner = self,
        position = {0.8,0.2,0.9}, rotation = {0,0,0}, width = 0, height = 0, font_size = 60}
    self.createButton(buttonParam)
end

function adminMenu(clickedObject, playerColor)
    if Player[playerColor].admin then
        self.clearButtons()
        self.clearInputs()

        local buttonParam = {click_function = 'nullFunc', label = "Admin Menu", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,-1.3}, rotation = {0,0,0}, width = 0, height = 0, font_size = 120}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'saveloadMenu', label = "Save/Load\nData", color = stringColorToRGB('White'), function_owner = self,
            position = {-0.7,0.2,-0.4}, rotation = {0,0,0}, width = 500, height = 300, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'importFunc', label = "Load Data From\nOther Board", color = stringColorToRGB('White'), function_owner = self,
            position = {0.7,0.2,-0.4}, rotation = {0,0,0}, width = 500, height = 300, font_size = 65}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'resMenu', label = "Reset\nScores", color = stringColorToRGB('White'), function_owner = self,
            position = {-0.7,0.2,0.3}, rotation = {0,0,0}, width = 500, height = 300, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'passMenu', label = "Manage\nPassword", color = stringColorToRGB('White'), function_owner = self,
            position = {0.7,0.2,0.3}, rotation = {0,0,0}, width = 500, height = 300, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'refreshStart', label = "Cancel", color = stringColorToRGB('White'), function_owner = self,
            position = {0.7,0.2,1}, rotation = {0,0,0}, width = 500, height = 300, font_size = 80}
        self.createButton(buttonParam)
    else
        broadcastToColor("Only promoted players can access this menu.", playerColor, {1,0,0})
    end
end

function saveloadMenu(clickedObject, playerColor)
    if Player[playerColor].admin then
        self.clearButtons()
        self.clearInputs()

        local buttonParam = {click_function = 'nullFunc', label = "Save or Load Current Data", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,-1.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 100}
        self.createButton(buttonParam)

        local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('Red'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
            position = {-0.8,0.2,-1}, rotation = {0,0,0}, width = 600, height = 110, font_size = 80, value = saveNames[1], alignment = 3, validation = 1, tab = 2}
        self.createInput(inputParam)

        local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('Blue'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0.8,0.2,-1}, rotation = {0,0,0}, width = 600, height = 110, font_size = 80, value = saveNames[2], alignment = 3, validation = 1, tab = 2}
        self.createInput(inputParam)

        local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('Green'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
            position = {-0.8,0.2,0.2}, rotation = {0,0,0}, width = 600, height = 110, font_size = 80, value = saveNames[3], alignment = 3, validation = 1, tab = 2}
        self.createInput(inputParam)

        local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('Orange'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0.8,0.2,0.2}, rotation = {0,0,0}, width = 600, height = 110, font_size = 80, value = saveNames[4], alignment = 3, validation = 1, tab = 2}
        self.createInput(inputParam)

        local buttonParam = {click_function = 'saveDB1', label = "Save", color = stringColorToRGB('Red'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {-1.1,0.2,-0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'saveDB2', label = "Save", color = stringColorToRGB('Blue'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {0.5,0.2,-0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'saveDB3', label = "Save", color = stringColorToRGB('Green'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {-1.1,0.2,0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'saveDB4', label = "Save", color = stringColorToRGB('Orange'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {0.5,0.2,0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'loadDB1', label = "Load", color = stringColorToRGB('Red'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {-0.5,0.2,-0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'loadDB2', label = "Load", color = stringColorToRGB('Blue'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {1.1,0.2,-0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'loadDB3', label = "Load", color = stringColorToRGB('Green'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {-0.5,0.2,0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'loadDB4', label = "Load", color = stringColorToRGB('Orange'), font_color = stringColorToRGB('White'), function_owner = self,
            position = {1.1,0.2,0.6}, rotation = {0,0,0}, width = 300, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'adminMenu', label = "Cancel", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
            position = {0,0.2,1.4}, rotation = {0,0,0}, width = 500, height = 200, font_size = 80}
        self.createButton(buttonParam)
    else
        broadcastToColor("Only promoted players can use the admin functions.", playerColor, {1,0,0})
    end
end

function resMenu(clickedObject, playerColor)
    if Player[playerColor].admin then
        self.clearButtons()
        self.clearInputs()

        local buttonParam = {click_function = 'nullFunc', label = "Enter your password:", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 120}
        self.createButton(buttonParam)

        local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('White'), function_owner = self, font_color = stringColorToRGB('Black'), function_owner = self,
            position = {0,0.2,-0.5}, rotation = {0,0,0}, width = 1000, height = 150, font_size = 100, value = fas, alignment = 3, validation = 4, tab = 2}
        self.createInput(inputParam)

        local buttonParam = {click_function = 'checkPass', label = "Reset\nScores", color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,0.2}, rotation = {0,0,0}, width = 700, height = 300, font_size = 120}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'adminMenu', label = "Cancel", color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,0.9}, rotation = {0,0,0}, width = 700, height = 300, font_size = 120}
        self.createButton(buttonParam)
    else
        broadcastToColor("Only promoted players can use the admin functions.", playerColor, {1,0,0})
    end
end

function passMenu(clickedObject, playerColor)
    if Player[playerColor].host then
        self.clearButtons()
        self.clearInputs()

        local buttonParam = {click_function = 'nullFunc', label = "Set your password:", color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,-1}, rotation = {0,0,0}, width = 0, height = 0, font_size = 120}
        self.createButton(buttonParam)

        local inputParam = {input_function = 'nullFunc', color = stringColorToRGB('White'), function_owner = self, font_color = stringColorToRGB('Black'), function_owner = self,
            position = {0,0.2,-0.7}, rotation = {0,0,0}, width = 1000, height = 150, font_size = 100, value = fas, alignment = 3, validation = 4, tab = 2}
        self.createInput(inputParam)

        local buttonParam = {click_function = 'storePass', label = "Store Password", color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,-0.2}, rotation = {0,0,0}, width = 800, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'clearPass', label = "Clear Password", color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,0.3}, rotation = {0,0,0}, width = 800, height = 200, font_size = 80}
        self.createButton(buttonParam)

        local buttonParam = {click_function = 'adminMenu', label = "Cancel", color = stringColorToRGB('White'), function_owner = self,
            position = {0,0.2,0.8}, rotation = {0,0,0}, width = 800, height = 200, font_size = 80}
        self.createButton(buttonParam)
    else
        broadcastToColor("Only the host can access this menu.", playerColor, {1,0,0})
    end
end


------------------Password Functions
band, rrotate, bxor, rshift, bnot =
  bit32.band, bit32.rrotate, bit32.bxor, bit32.rshift, bit32.bnot


-- Initialize table of round constants
-- (first 32 bits of the fractional parts of the cube roots of the first
-- 64 primes 2..311):
k = {
   0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
   0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
   0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
   0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
   0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
   0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
   0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
   0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
   0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
   0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
   0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
   0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
   0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
   0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
   0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
   0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
}


-- transform a string of bytes in a string of hexadecimal digits
function str2hexa (s)
    local h = string.gsub(s, ".",
        function(c)
            return string.format("%02x", string.byte(c))
        end)
    return h
end


-- transform number 'l' in a big-endian sequence of 'n' bytes
-- (coded as a string)
function num2s (l, n)
    local s = ""
    for i = 1, n do
        local rem = l % 256
        s = string.char(rem) .. s
        l = (l - rem) / 256
    end
    return s
end

-- transform the big-endian sequence of four bytes starting at
-- index 'i' in 's' into a number
function s232num (s, i)
    local n = 0
    for i = i, i + 3 do
        n = n*256 + string.byte(s, i)
    end
    return n
end

-- append the bit '1' to the message
-- append k bits '0', where k is the minimum number >= 0 such that the
-- resulting message length (in bits) is congruent to 448 (mod 512)
-- append length of message (before pre-processing), in bits, as 64-bit
-- big-endian integer
function preproc (msg, len)
    local extra = -(len + 1 + 8) % 64
    len = num2s(8 * len, 8)    -- original len in bits, coded
    msg = msg .. "\128" .. string.rep("\0", extra) .. len
    assert(#msg % 64 == 0)
    return msg
end

function initH256 (H)
    -- (first 32 bits of the fractional parts of the square roots of the
    -- first 8 primes 2..19):
    H[1] = 0x6a09e667
    H[2] = 0xbb67ae85
    H[3] = 0x3c6ef372
    H[4] = 0xa54ff53a
    H[5] = 0x510e527f
    H[6] = 0x9b05688c
    H[7] = 0x1f83d9ab
    H[8] = 0x5be0cd19
    return H
end

function digestblock (msg, i, H)

    -- break chunk into sixteen 32-bit big-endian words w[1..16]
    local w = {}
    for j = 1, 16 do
        w[j] = s232num(msg, i + (j - 1)*4)
    end

    -- Extend the sixteen 32-bit words into sixty-four 32-bit words:
    for j = 17, 64 do
        local v = w[j - 15]
        local s0 = bxor(rrotate(v, 7), rrotate(v, 18), rshift(v, 3))
        v = w[j - 2]
        local s1 = bxor(rrotate(v, 17), rrotate(v, 19), rshift(v, 10))
        w[j] = w[j - 16] + s0 + w[j - 7] + s1
    end

    -- Initialize hash value for this chunk:
    local a, b, c, d, e, f, g, h =
        H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]

    -- Main loop:
    for i = 1, 64 do
        local s0 = bxor(rrotate(a, 2), rrotate(a, 13), rrotate(a, 22))
        local maj = bxor(band(a, b), band(a, c), band(b, c))
        local t2 = s0 + maj
        local s1 = bxor(rrotate(e, 6), rrotate(e, 11), rrotate(e, 25))
        local ch = bxor (band(e, f), band(bnot(e), g))
        local t1 = h + s1 + ch + k[i] + w[i]

        h = g
        g = f
        f = e
        e = d + t1
        d = c
        c = b
        b = a
        a = t1 + t2
    end

    -- Add (mod 2^32) this chunk's hash to result so far:
    H[1] = band(H[1] + a)
    H[2] = band(H[2] + b)
    H[3] = band(H[3] + c)
    H[4] = band(H[4] + d)
    H[5] = band(H[5] + e)
    H[6] = band(H[6] + f)
    H[7] = band(H[7] + g)
    H[8] = band(H[8] + h)

end

function finalresult256 (H)
  -- Produce the final hash value (big-endian):
    return
    str2hexa(num2s(H[1], 4)..num2s(H[2], 4)..num2s(H[3], 4)..num2s(H[4], 4)..
             num2s(H[5], 4)..num2s(H[6], 4)..num2s(H[7], 4)..num2s(H[8], 4))
end

HH = {}    -- to reuse

function hash256 (msg)
    msg = preproc(msg, #msg)
    local H = initH256(HH)

    -- Process the message in successive 512-bit (64 bytes) chunks:
    for i = 1, #msg, 64 do
        digestblock(msg, i, H)
    end

    return finalresult256(H)
end
